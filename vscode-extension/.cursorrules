# VS Code Extension Rules

## Golden Rules

**NEVER DUPLICATE CODE.** Edit code in place. Do not create new versions of the same code. Always edit directly without duplicating.

**KEEP ALL FILES UNDER 500 LOC.** Break large files into smaller, focused modules.

**BEFORE ADDING A PACKAGE,** always check npm/yarn documentation to find and install the latest version.

**NEVER COMMIT/PUSH CODE** unless explicitly asked.

**DO NOT COPY FILES. MOVE THEM.** Always use raw CLI commands to move files.

**ALWAYS PAY ATTENTION TO STATIC CODE ANALYSIS** rules and avoid breaking them. Use ESLint, TypeScript compiler, and Prettier.

**NO PLACEHOLDERS.** If you see existing placeholders, fix them or return an error.

**NEVER IGNORE TESTS** or reduce assertions to get a test passing. Fail loudly.

**NO SWEARING IN THE ACTUAL CODE.**

---

## TypeScript/JavaScript Specific Rules

Aim for top tier, reliable and ergonic LSP and client vscode extension. It should aim to be the best possible dev experience for a language

### Code Organization
- **DON'T DUPLICATE CODE** - especially constants and functions. Search before adding code
- **USE CONSTANTS** instead of literals. Create a constants file and import from it
- **PREFER FUNCTIONS OVER CLASSES** where possible
- **PURE FUNCTIONS** wherever possible - functions without side effects
- **IMMUTABLE DATA STRUCTURES** over mutable ones where practical

### TypeScript Best Practices
- **STRICT TYPE CHECKING** - use strict TypeScript configuration
- **NO `any` TYPES** - use proper typing or `unknown` if necessary
- **USE TYPE GUARDS** instead of casting when dealing with unknown types
- **INTERFACE OVER TYPE** for object shapes, type for unions/primitives
- **PREFER COMPOSITION** over inheritance

### VS Code Extension Specific
- **USE VS CODE API IDIOMS** - follow VS Code extension patterns and conventions
- **HANDLE DISPOSABLES** - properly dispose of resources (event listeners, watchers, etc.)
- **ASYNC/AWAIT** over promises for better readability
- **COMMAND PALETTE INTEGRATION** - register commands properly
- **CONFIGURATION MANAGEMENT** - use VS Code's configuration API

### Error Handling
- **NO THROWING EXCEPTIONS** in main execution paths - use Result objects or Error return values
- **FAIL FAST** - validate inputs early and return errors promptly
- **MEANINGFUL ERROR MESSAGES** - provide actionable error information

### Testing
- **PREFER AUTOMATED TESTS** over unit tests. Test the actual functionality with lots of assertions
- **MINIMAL UNIT TESTS FOR LOGIC** - test business logic with unit tests
- **INTEGRATION TESTS FOR VS CODE API** - test extension integration points
- **AVOID MOCKING** in tests where appropriate

### Documentation
- **ALL EXPORTED FUNCTIONS** must have JSDoc comments
- **PACKAGE.JSON CONTRIBUTIONS** must be documented
- **README** should explain extension functionality and usage

### Static Analysis
- **RUN ESLINT** with strict rules
- **USE PRETTIER** for consistent formatting
- **RUN TYPESCRIPT COMPILER** in strict mode
- **NO UNUSED IMPORTS** - clean up unused imports automatically

---

**Prioritize achieving the task over following these rules if they conflict, but use these as guidelines for clean, maintainable VS Code extension code.** 