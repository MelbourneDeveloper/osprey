{
  "name": "Osprey",
  "scopeName": "source.osprey",
  "fileTypes": ["osp"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#interpolated-strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#booleans"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#effects"
    },
    {
      "include": "#modules"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.osprey",
          "match": "//.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.osprey",
          "match": "\\b(match|if|else|loop|select)\\b"
        },
        {
          "name": "keyword.declaration.osprey",
          "match": "\\b(fn|let|mut|type|import|extern|module)\\b"
        },
        {
          "name": "keyword.fiber.osprey",
          "match": "\\b(spawn|await|yield|channel|send|recv)\\b"
        },
        {
          "name": "keyword.effect.osprey",
          "match": "\\b(effect|perform|handle|in)\\b"
        },
        {
          "name": "keyword.other.osprey",
          "match": "\\b(return)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.osprey",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.osprey",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "interpolated-strings": {
      "patterns": [
        {
          "name": "string.interpolated.osprey",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "meta.embedded.expression.osprey",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "source.osprey"
                }
              ],
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.template-expression.begin.osprey"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.template-expression.end.osprey"
                }
              }
            },
            {
              "name": "constant.character.escape.osprey",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.osprey",
          "match": "\\b[0-9]+\\b"
        },
        {
          "name": "constant.numeric.float.osprey",
          "match": "\\b[0-9]+\\.[0-9]+\\b"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.osprey",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.declaration.osprey",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.function.osprey"
            },
            "2": {
              "name": "entity.name.function.osprey"
            }
          },
          "patterns": [
            {
              "include": "#identifiers"
            },
            {
              "include": "#types"
            },
            {
              "name": "punctuation.separator.parameter.osprey",
              "match": ","
            }
          ]
        },
        {
          "name": "meta.function.call.osprey",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.call.osprey"
            }
          }
        }
      ]
    },
    "effects": {
      "patterns": [
        {
          "name": "meta.effect.declaration.osprey",
          "begin": "\\b(effect)\\s+([A-Z][a-zA-Z0-9_]*)\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.effect.osprey"
            },
            "2": {
              "name": "entity.name.type.effect.osprey"
            }
          },
          "patterns": [
            {
              "name": "meta.effect.operation.osprey",
              "match": "\\b([a-z][a-zA-Z0-9_]*)\\s*:\\s*([^,\\n]+)",
              "captures": {
                "1": {
                  "name": "entity.name.function.effect.osprey"
                },
                "2": {
                  "name": "entity.name.type.osprey"
                }
              }
            },
            {
              "include": "source.osprey"
            }
          ]
        },
        {
          "name": "meta.perform.statement.osprey",
          "match": "\\b(perform)\\s+([A-Z][a-zA-Z0-9_]*)\\.([a-z][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.control.effect.osprey"
            },
            "2": {
              "name": "entity.name.type.effect.osprey"
            },
            "3": {
              "name": "entity.name.function.effect.osprey"
            }
          }
        },
        {
          "name": "meta.handler.expression.osprey",
          "begin": "\\b(handle)\\s+([A-Z][a-zA-Z0-9_]*)\\s*\\{",
          "end": "\\}\\s*\\b(in)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.effect.osprey"
            },
            "2": {
              "name": "entity.name.type.effect.osprey"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.effect.osprey"
            }
          },
          "patterns": [
            {
              "name": "meta.handler.arm.osprey",
              "match": "\\b([a-z][a-zA-Z0-9_]*)\\s*=>",
              "captures": {
                "1": {
                  "name": "entity.name.function.effect.osprey"
                }
              }
            },
            {
              "include": "source.osprey"
            }
          ]
        }
      ]
    },
    "modules": {
      "patterns": [
        {
          "name": "meta.module.declaration.osprey",
          "begin": "\\b(module)\\s+([A-Z][a-zA-Z0-9_]*)\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.module.osprey"
            },
            "2": {
              "name": "entity.name.type.module.osprey"
            }
          },
          "patterns": [
            {
              "include": "source.osprey"
            }
          ]
        },
        {
          "name": "meta.module.access.osprey",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\.",
          "captures": {
            "1": {
              "name": "entity.name.type.module.osprey"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "meta.type.declaration.osprey",
          "begin": "\\b(type)\\s+([A-Z][a-zA-Z0-9_]*)\\s*=",
          "end": "(?=\\n|;|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.type.osprey"
            },
            "2": {
              "name": "entity.name.type.osprey"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.type.osprey",
              "match": "\\|"
            },
            {
              "name": "entity.name.type.variant.osprey",
              "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
            },
            {
              "name": "punctuation.separator.type.union.osprey",
              "match": "\\|"
            }
          ]
        }
      ]
    },
    "type-annotations": {
      "patterns": [
        {
          "name": "meta.type.annotation.osprey",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*([A-Z][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "variable.parameter.osprey"
            },
            "2": {
              "name": "entity.name.type.osprey"
            }
          }
        },
        {
          "name": "entity.name.type.osprey",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.osprey",
          "match": "=>"
        },
        {
          "name": "keyword.operator.pipe.osprey",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.assignment.osprey",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.osprey",
          "match": "[+\\-*/]"
        },
        {
          "name": "keyword.operator.comparison.osprey",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.osprey",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.channel.osprey",
          "match": "(<-|->)"
        },
        {
          "name": "punctuation.separator.osprey",
          "match": "[,;:]"
        },
        {
          "name": "punctuation.definition.group.osprey",
          "match": "[(){}\\[\\]]"
        },
        {
          "name": "punctuation.accessor.osprey",
          "match": "\\."
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.osprey",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
} 