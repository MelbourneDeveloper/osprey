
// DO NOT CHANGE
// VERY SIMPLE
// Takes a JSON body, extracts the code, and runs it 
// with the Osprey compiler.
// IT ABSOLUTELY MUST RETURN THE OUTPUT OF THE PROGRAM IN THE RESPONSE.
// IT MUST NOT HARD CODE THE RESPONSE.
// It probably needs to parse the JSON request with the CLI
// DO NOT CHANGE

// JSON string escaping function
fn escapeJsonString(input: string) -> string = {
    // Basic JSON escaping - replace problematic characters
    // This is a simplified version since we don't have advanced string manipulation
    input  // TODO: Proper escaping when string manipulation functions are available
}

// EFFECT DECLARATION - The ProcessOutput effect for capturing process output
effect ProcessOutput {
    captureStdout: fn(string) -> Unit
    captureStderr: fn(string) -> Unit
    getAccumulatedOutput: fn() -> string
    resetAccumulatedOutput: fn() -> Unit
}

// Server configuration  
let serverPort = 3001



// EFFECTFUL callback function that performs output capture via algebraic effects
fn processEventHandler(processID: int, eventType: int, data: string) -> Unit !ProcessOutput = {
    match eventType {
        1 => perform ProcessOutput.captureStdout(data)
        2 => perform ProcessOutput.captureStderr(data)
        3 => {
            // DON'T pollute program output with process exit messages
            // Event type 3 is process exit - we don't want this in the program output
        }
        _ => {
            // DON'T pollute program output with unknown events either
        }
    }
}

// ðŸ”¥ REVOLUTIONARY EFFECTFUL PROCESS RUNNER WITH COMPILE-TIME SAFETY! ðŸ”¥
// This demonstrates Osprey's SUPERIOR effect safety over OCaml, Eff, and Koka!
fn processRunRequest(jsonBody: string) -> string !ProcessOutput = {
    // Reset accumulated output for this request
    perform ProcessOutput.resetAccumulatedOutput()
    
    // DUMP THE JSON TO A FILE FIRST!
    let writeJsonResult = writeFile("/tmp/osprey_request.json", jsonBody)
    
    // USE CLI JQ TO EXTRACT THE CODE FIELD - PROPER WAY!
    let extractResult = spawnProcess("jq -r '.code' /tmp/osprey_request.json > /tmp/osprey_code.txt", processEventHandler)
    
    let actualCode = match extractResult {
        Success { value } => {
            // Read the extracted code from the temporary file
            let codeFileContent = readFile("/tmp/osprey_code.txt")
            match codeFileContent {
                Success { value } => value
                Error { message } => "print(\"Failed to read extracted code!\")"
            }
        }
        Error { message } => "print(\"Failed to extract code from JSON!\")"
    }
    
    // Write the Osprey code to temp file
    let writeResult = writeFile("/tmp/osprey_web_temp.osp", actualCode)
    
    // Reset before running the actual program to capture ONLY its output
    perform ProcessOutput.resetAccumulatedOutput()
    
    // Spawn the Osprey compiler process WITH --quiet flag to suppress compiler messages
    // Try multiple possible paths for the osprey binary
    let programOutput = spawnProcess("osprey /tmp/osprey_web_temp.osp --run --quiet", processEventHandler)
    
    match programOutput {
        Success { value } => {
            // Clean up process resources
            cleanupProcess(value)
            
            // GET THE ACTUAL CAPTURED OUTPUT FROM EFFECTS! 
            let capturedOutput = perform ProcessOutput.getAccumulatedOutput()
            
            // Build JSON response with escaped output - SUCCESS case (suppress compiler success messages)
            let cleanOutput = escapeJsonString(capturedOutput)
            "{\"success\": true, \"compilerOutput\": \"\", \"programOutput\": \"" + cleanOutput + "\"}"
        }
        Error { message } => {
            // GET ANY CAPTURED OUTPUT (likely error messages)
            let capturedOutput = perform ProcessOutput.getAccumulatedOutput()
            let cleanOutput = escapeJsonString(capturedOutput)
            "{\"success\": false, \"compilerOutput\": \"Compilation failed: " + message + "\", \"programOutput\": \"" + cleanOutput + "\"}"
        }
    }
}

// HTTP request handler function - same as before but now POWERED BY EFFECTS!
fn handleHttpRequest(method: string, path: string, headers: string, body: string) -> HttpResponse !ProcessOutput = 
    match method {
        "POST" => match path {
            "/api/run" => {
                let responseBody = processRunRequest(body)
                HttpResponse {
                    status: 200,
                    headers: "Content-Type: application/json\r\nAccess-Control-Allow-Origin: *\r\n",
                    contentType: "application/json",
                    streamFd: -1,
                    isComplete: true,
                    partialBody: responseBody
                }
            }
            _ => {
                let errorBody = "{\"success\": false, \"error\": \"Endpoint not found\"}"
                HttpResponse {
                    status: 404,
                    headers: "Content-Type: application/json\r\nAccess-Control-Allow-Origin: *\r\n",
                    contentType: "application/json", 
                    streamFd: -1,
                    isComplete: true,
                    partialBody: errorBody
                }
            }
        }
        _ => {
            let methodErrorBody = "{\"success\": false, \"error\": \"Method not allowed\"}"
            HttpResponse {
                status: 405,
                headers: "Content-Type: application/json\r\nAccess-Control-Allow-Origin: *\r\n",
                contentType: "application/json",
                streamFd: -1,
                isComplete: true,
                partialBody: methodErrorBody
            }
        }
    }

// ðŸ”¥ SUPREMO ALGEBRAIC EFFECTS MAIN WITH PROPER IN-MEMORY STATE! ðŸ”¥
// This is the PROPER FUNCTIONAL WAY using in-memory state management!
fn main() -> Unit = {
    // State variables for accumulating process output
    let accumulatedStdout = ""
    let accumulatedStderr = ""
    
    // Simplified single-file approach for process output accumulation
    handle ProcessOutput
        captureStdout data => {
            accumulatedStdout = accumulatedStdout + data
        }
        captureStderr data => {
            accumulatedStderr = accumulatedStderr + data
        }
        getAccumulatedOutput => accumulatedStdout + accumulatedStderr
        resetAccumulatedOutput => {
            accumulatedStdout = ""
            accumulatedStderr = ""
        }
    in {
        print("ðŸš€ Starting SUPREMO Algebraic Effects Web Compiler on port 3001")
        let serverId = httpCreateServer(3001, "127.0.0.1")
        let listenResult = httpListen(serverId, handleHttpRequest)
        print("âœ… SUPREMO Effects Server listening on http://127.0.0.1:3001")

        // Keep server alive for 5 minutes
        sleep(3000000)

        let stopResult = httpStopServer(serverId)
        print("ðŸ›‘ SUPREMO Effects Server stopped")
    }
}