# Web Compiler Rules

## Golden Rules

**NEVER DUPLICATE CODE.** Edit code in place. Do not create new versions of the same code. Always edit directly without duplicating.

**KEEP ALL FILES UNDER 500 LOC.** Break large files into smaller, focused modules.

**NEVER COMMIT/PUSH CODE** unless explicitly asked.

**NO PLACEHOLDERS.** If you see existing placeholders, fix them or return an error.

**NEVER IGNORE TESTS** or reduce assertions to get a test passing. Fail loudly.

**NO SWEARING IN THE ACTUAL CODE.**

---

## Production API Focus

**THIS IS A PRODUCTION API** - don't break it. Keep changes minimal and safe.

**SERVES THE LSP FOR THE WEBSITE** - this API must stay working for the language server.

**KEEP IT SIMPLE** - don't over-engineer. This is a basic project.

**MAKE IT DEPLOYABLE** - ensure the app can be deployed to the host without issues.

**THE CI PIPELINE IS CRITICAL** - ensure the Docker Compose tests keep passing.

---

## Basic Code Standards

**DON'T DUPLICATE CODE** - especially constants and functions.

**USE CONSTANTS** instead of literals.

**HANDLE ERRORS PROPERLY** - don't let the API crash.

**KEEP THE API WORKING** - test that endpoints respond correctly.

---

## Deployment Essentials

**DOCKER COMPOSE MUST WORK** - the Docker setup needs to build and run successfully.

**API ENDPOINTS MUST RESPOND** - ensure all endpoints return proper responses.

**ENVIRONMENT VARIABLES** - handle configuration properly for different environments.

---

## Testing Focus

**INTEGRATION TESTS ARE KEY** - the Docker Compose pipeline tests are the most important.

**TEST THE API ENDPOINTS** - ensure they respond and don't crash.

**DON'T BREAK THE PIPELINE** - if the CI tests fail, fix them immediately.

---

**Remember: This is a production API that needs to stay running and be deployable. Keep it simple and reliable.** 