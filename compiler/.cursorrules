# Cursor Rules for Go Development

## Golden Rules - Always follow these unless the task contradicts them

**NEVER IGNORE TESTS** or reduce assertions to get a test passing. Fail loudly. If dependencies are missing, FAIL!

**NEVER COMMIT/PUSH CODE** unless explicitly asked.

**NEVER DUPLICATE CODE.** Edit code in place. Do not create new versions of the same code. Always edit directly without duplicating.

**KEEP ALL FILES UNDER 500 LOC.** Break large files into smaller, focused modules.

**BEFORE ADDING A PACKAGE,** always check the documentation to find and install the latest version.

**DO NOT COPY FILES. MOVE THEM.** Always use raw CLI commands to move files.

**ALWAYS PAY ATTENTION TO STATIC CODE ANALYSIS** rules and avoid breaking them. Use `go vet`, `golint`, and `gofmt`. Do not pay attention to syntax errors for .osp files in Vscode/Cursor's "Problems" tab. These errors are coming from the Osprey compiler, which may be out of date.

**PAY ATTENTION TO THE compilersbestpractice.md GUIDELINES**

**NO PLACEHOLDERS.** If you see existing placeholders, fix them or return/throw an error.

**NO SWEARING IN THE ACTUAL CODE.**

---

## Go-Specific Rules

**Prioritize achieving the task over following these rules if they conflict, but use these as guidelines for clean, maintainable Go code.** 

### Code Organization
- **DON'T DUPLICATE CODE** - especially constants and functions. Search before adding code
- **USE CONSTANTS** instead of literals. Name values meaningfully and group them logically
- **PREFER FUNCTIONS OVER METHODS** where receiver state isn't needed
- **PURE FUNCTIONS** wherever possible - pure functions without side effects (except where this would degrade performace of the compiler)
- **IMMUTABLE DATA STRUCTURES** over mutable ones where practical (except where this would degrade performace of the compiler)

### Error Handling
- **Avoid panicking where possible** Use Go's idiomatic error handling with `error` return values
- **CHECK ERRORS EXPLICITLY.** Don't ignore returned errors
- **FAIL FAST.** Return errors early rather than continuing with invalid state

### Go Idioms
- **USE IDIOMATIC GO CODE**
- **USE INTERFACES** sparingly and make them small and focused
- **ACCEPT INTERFACES, RETURN STRUCTS** as a general principle
- **USE TYPE SWITCHES** instead of casting when dealing with interface{} types
- **PREFER COMPOSITION OVER INHERITANCE** (Go doesn't have inheritance, but avoid deep embedding)
- **USE CHANNELS** for communication between goroutines, not shared memory
- **CLOSE CHANNELS** when done sending (sender's responsibility)

### Testing
- **PREFER PROGRAM OUTPUT TEST** code in, verify stout, OR code in, verify compilation error text
- **TABLE-DRIVEN TESTS** for multiple test casess
- **TEST ALL ERROR PATHS** explicitly
- **USE SUBTESTS** for organizing related test cases
- **BENCHMARK CRITICAL PATHS** with `go test -bench`

### Documentation
- **ALL EXPORTED FUNCTIONS** must have documentation comments starting with the function name
- **PACKAGE COMMENTS** should explain the purpose of the package
- **NO COMMENTS IN FUNCTION BODIES** - code should be self-documenting
- **USE GODOC** format for all documentation

### Static Analysis
- **RUN `go fmt`** before committing (should be automatic)
- **RUN `go vet`** to catch common mistakes
- **USE `golint`** for style checking
- **RUN `go mod tidy`** to clean up dependencies
- **USE `goimports`** to automatically manage imports

### Performance
- **MAINTAINABILITY OVER PERFORMANCE** but avoid inefficient patterns that will impact compiler performance
- **USE PROFILING** (`go tool pprof`) sparingly when there is a question about performance
- **MINIMIZE ALLOCATIONS** in hot paths
- **USE SYNC.Pool** for expensive-to-create objects that are reused

### Naming Conventions
- **USE CAMELCASE** for multi-word names (Go convention)
- **SHORT VARIABLE NAMES** for short scopes (i, j for loops; r for readers)
- **DESCRIPTIVE NAMES** for longer scopes
- **AVOID STUTTERING** (don't name a function `userGetUser` in package `user`)

---

