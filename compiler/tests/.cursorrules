# Shared Testing Rules for Compiler

## Testing Philosophy

**INTEGRATION TESTS ARE PRIMARY** - they prove the compiler works end-to-end and should be the main focus.

**UNIT TESTS FOR PROBLEM ISOLATION ONLY** - use sparingly, only when integration tests can't isolate a problem.

**AVOID COVERAGE-DRIVEN TESTING** - don't write tests just for coverage metrics. Write tests that provide confidence.

**FOCUS ON LONG-TERM VALUE** - design tests that will provide maximum benefit over time.

---

## Universal Testing Principles

**NO DUPLICATION** - delete tests where other tests already provide comprehensive coverage.

**FAIL HARD ON PROBLEMS** - don't fail silently. Make dependency failures and issues obvious.

**ALL TESTS MUST BE AUTOMATED** - no manual intervention required.

**FAST FEEDBACK LOOPS** - tests should run quickly during development.

---

## DO (All Tests)

**TEST BUSINESS LOGIC** - focus on core functionality that could break silently.

**VERIFY EXPECTED BEHAVIOR** - test what the code should do, not how it does it.

**WRITE SELF-DOCUMENTING TESTS** - test names and structure should make intent clear.

**CLEAN UP AFTER TESTS** - always clean up temporary files, processes, and state.

**CHECK DEPENDENCIES EXPLICITLY** - verify required tools exist and fail fast if missing.

**AIM FOR FULL CODE COVERAGE** - all code should be covered. if code is not covered by tests, it may be dead code and should be considered for deletion. don't use unit tests to achieve this

**TEST FROM PARSING TO JITTING TO RUNNING TO STDOUT** - don't run the compiled compiler binary except for CLI tests

---

## DON'T (All Tests)

**DON'T WRITE DEBUG TESTS** - avoid temporary tests that won't provide long-term value.

**DON'T TEST IMPLEMENTATION DETAILS** - test behavior and outcomes, not internal mechanics.

**DON'T IGNORE FLAKY TESTS** - fix them or delete them. Flaky tests erode confidence.

**DON'T WRITE OVERLY COMPLEX TESTS** - tests should be simple and obvious.

**DON'T ASSUME ENVIRONMENT STATE** - tests should work regardless of previous test runs.

**DON'T TEST THE COMPILER BINARY** - except for CLI tests

---

## File Organization

**KEEP FILES UNDER 500 LOC** - break up large test files by functionality.

**ONE CONCERN PER FILE** - each test file should focus on a specific aspect.

**DESCRIPTIVE FILE NAMES** - file names should clearly indicate what functionality is being tested.

---

**Remember: Tests are documentation of how the system should work. Make them clear, reliable, and valuable.** 