# Integration Testing Rules (End-to-End Proof)

## Purpose
Integration tests **prove the compiler works end-to-end**. These are the primary tests that verify compiler functionality.

## Most Important Test Types

**EXAMPLES TESTS** - the gold standard for proving compiler functionality works correctly. These test fils are in compiler/tests/integration

**COMPILATION FAILURE TESTS** - verify the compiler fails gracefully with proper error messages. These tests are in compiler/tests/integration/compilation_failure_test.go but you can break these out into smaller files if this gets too big

---

## Integration-Specific Principles

**ALL EXAMPLES MUST HAVE EXPECTED OUTPUTS** - every test example should verify both compilation and execution results.

**VERIFY COMPILER ERRORS WITH FAILSCOMPILATION EXAMPLES** - create examples in the `failscompilation/` folder to test error handling.

**MERGE EXAMPLES TOGETHER WHERE THERE IS OVERLAP** - isolation is not as important as comprehensive behavior enforcement.

---

## Integration File Organization

**SEPARATE BY FEATURE AREA** - group tests by compiler features (fiber, http, websox, etc.)

**EXAMPLES OVER UNIT TESTS** - prefer comprehensive examples that test real-world usage patterns.

**ONE CONCERN PER FILE** - each test file should focus on a specific aspect of compiler functionality.

**SMALL, FOCUSED FILES** - better to have many small test files than few large ones.

---

## Integration-Specific DO

**TEST REAL-WORLD USAGE PATTERNS** - examples should mirror how developers will actually use the compiler.

**VERIFY BOTH COMPILATION AND EXECUTION** - test that code compiles AND produces expected runtime behavior.

**TEST ERROR MESSAGES** - ensure compiler errors are helpful and accurate.

**USE TABLE-DRIVEN TESTS** for multiple similar scenarios.

**TEST EDGE CASES** - boundary conditions, empty inputs, malformed syntax.

**VERIFY OUTPUT EXACTLY** - check expected outputs character-for-character when possible.

**TEST CROSS-PLATFORM BEHAVIOR** - ensure compiler works consistently across environments.

---

## DON'T

**DON'T IGNORE FLAKY TESTS** - fix them or delete them. Flaky tests erode confidence.

**DON'T TEST WHAT EXAMPLES ALREADY COVER** - if an example comprehensively tests functionality, don't duplicate it.

**DON'T WRITE OVERLY COMPLEX TESTS** - integration tests should be simple and obvious.

**DON'T SKIP CLEANUP** - always clean up temporary files and processes.

**DON'T ASSUME DEPENDENCIES EXIST** - explicitly check for required tools and fail fast if missing.

**DON'T WRITE TESTS THAT REQUIRE Manual INTERVENTION** - all tests must be fully automated.

---

## Error Testing Strategy

**CREATE FAILSCOMPILATION EXAMPLES** for every type of compiler error.

**VERIFY ERROR MESSAGES ARE HELPFUL** - test that errors guide developers to solutions.

**TEST ERROR RECOVERY** - ensure the compiler handles errors gracefully without crashing.

**COVER ALL ERROR PATHS** - syntax errors, semantic errors, runtime errors.

---

## Performance Considerations

**PARALLEL EXECUTION** where possible to speed up test suites.

**SELECTIVE TEST RUNNING** - ability to run subsets of tests during development.

---

**Remember: Integration tests are the primary proof that the compiler works. Make them comprehensive and reliable.** 