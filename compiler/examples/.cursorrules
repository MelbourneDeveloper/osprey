# Examples Rules (Live Integration Tests)

Examples **ARE integration tests** - they prove the compiler works by being real, runnable code that developers can use as reference.

## Most Important Example Types

**TESTED EXAMPLES** - examples in `tested/` folders that have expected outputs and are automatically verified.

**FAILSCOMPILATION EXAMPLES** - examples that demonstrate proper compiler error handling and messages.

**FEATURE DEMONSTRATIONS** - comprehensive examples showing real-world usage patterns.

---

**ALWAYS VERIFY FUNCTIONALITY WITH OUTPUT** don't just run statements. print the result

**REDUCE PRINT OUTPUT** only use print to prove functionality is working

**CONSOLIDATE BY FUNCTIONALITY** - group related examples together instead of having many tiny files.

**BREAK INTO FOLDERS BY FEATURE AREA** - separate fiber, http, websox, etc. into distinct folders.

**MEATY EXAMPLES OVER TRIVIAL ONES** - examples should demonstrate substantial functionality, not just "hello world".

**FEWER, BETTER EXAMPLES** - prefer comprehensive examples over many small ones.

**CONSOLIDATE CONSECUTIVE PRINTS** - combine multiple consecutive print statements into single statements.

**USE TOP LEVEL STATEMENTS** - don't use main()

**PROPER ERROR HANDLING** - show how to handle errors gracefully.

**REALISTIC SCENARIOS** - use examples that mirror real-world use cases.

---

## DO

**ALWAYS INCLUDE EXPECTED OUTPUTS** - all examples should have corresponding expected output files.

**DEMONSTRATE EDGE CASES** - show how to handle boundary conditions and error scenarios.

**CONSOLIDATE RELATED EXAMPLES** - merge small related examples into comprehensive demonstrations.

**MAKE EXAMPLES RUNNABLE** - every example should compile and execute successfully.

**INCLUDE ERROR HANDLING** - show proper error handling patterns in examples.

---

## DON'T

**DON'T CREATE TRIVIAL EXAMPLES** - avoid "hello world" style examples unless they serve a specific purpose.

**DON'T DUPLICATE FUNCTIONALITY** - if an example already demonstrates a feature comprehensively, don't create another one.

**DON'T LEAVE TEMPORARY DEBUGGING PRINTS** - clean up temporary debugging output before committing.

**DON'T CREATE EXAMPLES THAT ARE LIKELY TO FAIL** - examples should be understandable but substantial.

**DON'T IGNORE EXPECTED OUTPUTS** - every example should verify its behavior.

---

**Remember: Examples are both tests and documentation. Make them comprehensive, clean, and valuable to developers learning the language. They are important for humans and AI agents. Make them readable for both but don't pollute the test with rubbish prints or comments** 