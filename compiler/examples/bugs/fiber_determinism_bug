// Test that exposes the fiber non-determinism bug
// This test demonstrates that fiber execution order is not deterministic
// when using pthread threads in the runtime

effect Logger {
    info: fn(string) -> Unit
}

effect Metrics {
    recordSuccess: fn(string, int) -> Unit
}

type TaskPriority = Urgent | High | Medium

fn calculateComplexity(priority) = match priority {
    Urgent => 750
    High => 450    
    Medium => 600
}

fn processTask(taskId: string, dataSize: int, priority: TaskPriority) -> int ![Logger, Metrics] = {
    perform Logger.info("Starting task: " + taskId + " with data size: " + toString(dataSize))
    let complexity = calculateComplexity(priority)
    let processed = dataSize * 8
    perform Metrics.recordSuccess(taskId, processed)
    perform Logger.info("Task " + taskId + " completed successfully in " + toString(complexity / 10 + 2) + "ms")
    processed
}

fn processTask1() = processTask(taskId: "task-1", dataSize: 150, priority: High)
fn processTask2() = processTask(taskId: "task-2", dataSize: 200, priority: Medium)
fn processTask3() = processTask(taskId: "task-3", dataSize: 75, priority: Urgent)

fn main() -> Unit = {
    handle Metrics
        recordSuccess taskId processed => print("✅ " + taskId + " succeeded: " + toString(processed) + " units")
    in handle Logger
        info msg => print("ℹ️  " + msg)
    in {
        print("=== Fiber Non-Determinism Bug Test ===")
        print("This test should execute tasks in order 1, 2, 3")
        print("But due to pthread race conditions, sometimes task 3 runs before task 2")
        print("")
        
        // Spawn all three fibers
        let fiber1 = spawn processTask1()
        let fiber2 = spawn processTask2()  
        let fiber3 = spawn processTask3()
        
        // Await in order - but execution may be out of order
        let result1 = await(fiber1)
        let result2 = await(fiber2)
        let result3 = await(fiber3)
        
        print("Total processed: " + toString(result1 + result2 + result3) + " units")
        print("=== Test Complete ===")
    }
}