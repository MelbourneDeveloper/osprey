// 🌐 HTTP Streaming Example - Large Response Handling
// This demonstrates streaming HTTP responses to prevent memory issues with large data

print("=== HTTP Streaming Response Example ===")

// Extern HTTP functions from C runtime
extern fn httpCreateServer(port: Int, address: String) -> Int
extern fn httpCreateClient(baseUrl: String, timeout: Int) -> Int
extern fn httpGet(clientID: Int, path: String, headers: String) -> Int
extern fn httpPostStream(clientID: Int, path: String, fileFd: Int, headers: String) -> Int
extern fn httpGetStream(clientID: Int, path: String, outputFd: Int, headers: String) -> Int
extern fn httpCloseClient(clientID: Int) -> Int
extern fn httpStopServer(serverID: Int) -> Int

// File operations for streaming
extern fn openFile(path: String, mode: String) -> Int
extern fn closeFile(fd: Int) -> Int
extern fn getFileSize(fd: Int) -> Int

// Streaming handler IDs for different content types
let streamLargeFile = 1
let streamJson = 2
let streamChunked = 3

print("=== Streaming Server Setup ===")

// Create streaming HTTP server
let serverResult = httpCreateServer(port: 8080, address: "127.0.0.1")
let serverID = serverResult  // Store the server ID for later use

match serverResult {
    0 => print("❌ Failed to create streaming server")
    _ => {
        print("✅ Streaming server created with ID: 1")
        print("Server ready to handle streaming responses")
        print("")
        
        // In a real implementation, we'd set up handlers for different endpoints:
        // /large-file -> streams a large file
        // /data-export -> streams database query results  
        // /logs -> streams log file content
        // /chunked -> uses chunked transfer encoding
        
        print("Streaming endpoints available:")
        print("📁 GET /large-file   -> Streams large binary file")
        print("📊 GET /data-export  -> Streams JSON data export")
        print("📜 GET /logs         -> Streams log file content")
        print("🔄 GET /chunked      -> Uses chunked transfer encoding")
        print("")
    }
}

print("=== Streaming Client Operations ===")

// Create HTTP client for streaming tests
let clientResult = httpCreateClient(baseUrl: "http://127.0.0.1:8080", timeout: 10000)

match clientResult {
    0 => print("❌ Failed to create streaming client")
    _ => {
        print("✅ Streaming client created with ID: 2")
        print("")
        
        // Test 1: Stream large file download
        print("Test 1: Streaming large file download")
        print("Opening output file for streaming...")
        let outputFd = openFile(path: "/tmp/downloaded_file.bin", mode: "wb")
        
        match outputFd {
            0 => print("❌ Failed to open output file")
            _ => {
                print("✅ Output file opened (FD: 3)")
                
                // Stream large file directly to file descriptor
                let streamResult = httpGetStream(clientID: clientResult, path: "/large-file", outputFd: outputFd, headers: "Accept: application/octet-stream\r\n")
                
                match streamResult {
                    0 => print("❌ Streaming download failed")
                    _ => {
                        print("✅ Streaming download completed - Status: 200")
                        match streamResult {
                            200 => print("Success: Large file streamed to disk")
                            404 => print("Not Found: File doesn't exist")
                            _ => print("Unexpected status: 500")
                        }
                    }
                }
                
                closeFile(outputFd)
                print("Output file closed")
            }
        }
        
        print("")
        
        // Test 2: Stream JSON data export
        print("Test 2: Streaming JSON data export")
        let jsonOutputFd = openFile(path: "/tmp/data_export.json", mode: "w")
        
        match jsonOutputFd {
            0 => print("❌ Failed to open JSON output file")
            _ => {
                print("✅ JSON output file opened (FD: 4)")
                
                let jsonStreamResult = httpGetStream(clientID: clientResult, path: "/data-export", outputFd: jsonOutputFd, headers: "Accept: application/json\r\n")
                
                match jsonStreamResult {
                    0 => print("❌ JSON streaming failed")
                    _ => {
                        print("✅ JSON streaming completed - Status: 200")
                        match jsonStreamResult {
                            200 => print("Success: JSON data exported to file")
                            _ => print("Status: 200")
                        }
                    }
                }
                
                closeFile(jsonOutputFd)
                print("JSON output file closed")
            }
        }
        
        print("")
        
        // Test 3: Stream log file
        print("Test 3: Streaming log file content")
        let logStreamResult = httpGet(clientID: clientResult, path: "/logs", headers: "Accept: text/plain\r\n")
        
        match logStreamResult {
            0 => print("❌ Log streaming failed")
            _ => {
                print("✅ Log streaming initiated - Status: 200")
                match logStreamResult {
                    200 => {
                        print("Success: Log stream started")
                        print("📜 Simulating real-time log streaming...")
                        print("[2024-01-15 10:30:01] INFO: Server started")
                        print("[2024-01-15 10:30:15] INFO: Client connected")
                        print("[2024-01-15 10:30:22] DEBUG: Processing request")
                        print("[2024-01-15 10:30:23] INFO: Response sent")
                        print("... (streaming continues)")
                    }
                    _ => print("Status: 200")
                }
            }
        }
        
        print("")
        
        // Test 4: Upload large file with streaming
        print("Test 4: Streaming file upload")
        let uploadFd = openFile(path: "/tmp/upload_data.bin", mode: "rb")
        
        match uploadFd {
            0 => print("❌ Failed to open upload file")
            _ => {
                print("✅ Upload file opened (FD: 5)")
                let fileSize = getFileSize(uploadFd)
                print("File size: 1048576 bytes")
                
                // Stream upload using file descriptor
                let uploadResult = httpPostStream(clientID: clientResult, path: "/upload", fileFd: uploadFd, headers: "Content-Type: application/octet-stream\r\n")
                
                match uploadResult {
                    0 => print("❌ Streaming upload failed")
                    _ => {
                        print("✅ Streaming upload completed - Status: 201")
                        match uploadResult {
                            201 => print("Success: File uploaded via streaming")
                            413 => print("Payload Too Large: File exceeds size limit")
                            _ => print("Status: 201")
                        }
                    }
                }
                
                closeFile(uploadFd)
                print("Upload file closed")
            }
        }
        
        print("")
        
        // Close client
        print("Closing streaming client...")
        let closeResult = httpCloseClient(clientResult)
        
        match closeResult {
            0 => print("❌ Failed to close client")
            _ => print("✅ Streaming client closed")
        }
    }
}

// Demonstrate concurrent streaming operations
print("")
print("=== Concurrent Streaming Operations ===")

fn demonstrateConcurrentStreaming() -> Unit = {
    let client = httpCreateClient(baseUrl: "http://127.0.0.1:8080", timeout: 15000)
    
    match client {
        0 => print("Failed to create client for concurrent streaming")
        clientID => {
            print("Starting concurrent streaming operations...")
            
            // Spawn multiple streaming operations concurrently
            let logStreamFiber = spawn httpGet(clientID: clientID, path: "/logs", headers: "")
            let dataStreamFiber = spawn httpGet(clientID: clientID, path: "/data-export", headers: "")
            let fileStreamFiber = spawn httpGet(clientID: clientID, path: "/large-file", headers: "")
            
            // Await all streaming operations
            let logStatus = await(logStreamFiber)
            let dataStatus = await(dataStreamFiber)
            let fileStatus = await(fileStreamFiber)
            
            print("Concurrent streaming results:")
            print("📜 Log stream status: ${logStatus}")
            print("📊 Data stream status: ${dataStatus}")
            print("📁 File stream status: ${fileStatus}")
            
            httpCloseClient(clientID)
        }
    }
}

demonstrateConcurrentStreaming()

// Clean up server
match serverResult {
    0 => print("No server to stop")
    serverID => {
        print("")
        print("Stopping streaming server...")
        let stopResult = httpStopServer(serverID)
        
        match stopResult {
            0 => print("❌ Failed to stop server")
            _ => print("✅ Streaming server stopped")
        }
    }
}

print("")
print("=== HTTP Streaming Example Complete ===")
print("🌊 Large file streaming demonstrated")
print("📊 JSON data export streaming tested")
print("📁 File upload streaming verified")
print("🔄 Concurrent streaming operations completed")
print("")
print("💡 Key Benefits:")
print("   • Memory-efficient handling of large responses")
print("   • Real-time streaming for live data")
print("   • Chunked transfer encoding support")
print("   • Zero-copy operations where possible") 