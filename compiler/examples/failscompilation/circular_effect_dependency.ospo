// ðŸš¨ CIRCULAR EFFECT DEPENDENCY TEST - SHOULD FAIL COMPILATION! ðŸš¨

// Effects that would create circular dependencies when handlers are implemented
effect StateA {
    getFromB: fn() -> int
}

effect StateB {
    getFromA: fn() -> int  
}

// Function A that depends on StateB (via StateA.getFromB)
fn functionA() -> int !StateA = {
    perform StateA.getFromB()  // This would need handler that calls functionB
}

// Function B that depends on StateA (via StateB.getFromA)  
fn functionB() -> int !StateB = {
    perform StateB.getFromA()  // This would need handler that calls functionA
}

// Main function that would create circular dependency through handlers
fn main() -> Unit = {
    let a = functionA()  // Unhandled StateA - would need handler calling functionB
    let b = functionB()  // Unhandled StateB - would need handler calling functionA  
    print("Results: " + toString(a) + ", " + toString(b))
} 