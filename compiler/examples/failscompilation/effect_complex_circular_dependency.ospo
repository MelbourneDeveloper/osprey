// ðŸš¨ COMPLEX CIRCULAR DEPENDENCY TEST - SHOULD FAIL COMPILATION! ðŸš¨
// This proves the compiler catches circular dependencies between multiple effects

effect ServiceA {
    callB: fn() -> int
    processA: fn(int) -> string
}

effect ServiceB {
    callC: fn() -> int
    processB: fn(int) -> string
}

effect ServiceC {
    callA: fn() -> int  // Creates circular dependency: A -> B -> C -> A
    processC: fn(int) -> string
}

// Functions that would create circular dependency through effects
fn serviceAFunction() -> int !ServiceA = {
    perform ServiceA.callB()  // Would need handler that calls serviceB
}

fn serviceBFunction() -> int !ServiceB = {
    perform ServiceB.callC()  // Would need handler that calls serviceC
}

fn serviceCFunction() -> int !ServiceC = {
    perform ServiceC.callA()  // Would need handler that calls serviceA - CIRCULAR!
}

fn main() -> Unit = {
    let a = serviceAFunction()  // Unhandled effects - would create circular dependency
    let b = serviceBFunction()
    let c = serviceCFunction()
    print("Results: " + toString(a) + ", " + toString(b) + ", " + toString(c))
} 