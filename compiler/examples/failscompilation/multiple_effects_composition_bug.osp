// ðŸš€ MULTIPLE EFFECTS COMPOSITION BUG TEST ðŸ”¥
// This test SHOULD work but FAILS due to multiple effects handler lookup bug

effect Logger {
    log: fn(string) -> Unit
    error: fn(string) -> Unit
}

effect State {
    get: fn() -> int
    set: fn(int) -> Unit
}

effect Counter {
    increment: fn() -> Unit
    getValue: fn() -> int
}

// Function with multiple effects that should be handled
fn multiEffectOperation() -> int ![Logger, State, Counter] = {
    perform Logger.log("Starting multi-effect operation")
    let currentState = perform State.get()
    perform Counter.increment()
    let counterValue = perform Counter.getValue()
    let newState = currentState + counterValue
    perform State.set(newState)
    perform Logger.log("Operation complete with value: " + toString(newState))
    newState
}

// Function with two effects
fn dualEffectTask() -> Unit ![Logger, Counter] = {
    perform Logger.log("Dual effect task starting")
    perform Counter.increment()
    let value = perform Counter.getValue()
    perform Logger.log("Counter value: " + toString(value))
}

// This should work but fails due to multiple effects composition bug
fn main() -> Unit = with handler Logger
    log(msg) => print("[LOG] " + msg)
    error(msg) => print("[ERROR] " + msg)
{
    with handler State
        get() => 10
        set(value) => print("State updated to: " + toString(value))
    {
        with handler Counter
            increment() => print("Counter incremented")
            getValue() => 5
        {
            print("=== Testing Multiple Effects Composition ===")
            dualEffectTask()
            let result = multiEffectOperation()
            print("Final result: " + toString(result))
            print("=== Test Complete ===")
        }
    }
} 