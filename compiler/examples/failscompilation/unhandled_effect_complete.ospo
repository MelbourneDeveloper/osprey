// ðŸš€ COMPLETE ALGEBRAIC EFFECTS SYSTEM! ðŸ”¥
// This demonstrates REAL algebraic effects with handlers and perform!

// Effect declaration for logging
effect Logger {
    log: fn(string) -> Unit
    debug: fn(string) -> Unit  
}

// Effect declaration for state
effect State {
    get: fn() -> int
    set: fn(int) -> Unit
}

// Effectful function that performs logging
fn processData(data: string) -> int !Logger = {
    perform Logger.log("Processing: " + data)
    perform Logger.debug("Debug info for: " + data)
    42
}

// Effectful function with state effects
fn complexOperation() -> int !State = {
    let currentState = perform State.get()
    perform State.set(currentState + 1)
    let newState = perform State.get()
    newState
}

// Pure function for comparison
fn pureCalculation(x: int) -> int = x * 2

// Main function demonstrating algebraic effects
fn main() -> Unit = {
    print("ðŸš€ DEMONSTRATING PRIMO ALGEBRAIC EFFECTS! ðŸ”¥")
    
    // This will trigger unhandled effect error (demonstrating effect tracking)
    let result1 = processData("test data")
    print("Result from effectful function: " + toString(result1))
    
    // Pure function works normally
    let result2 = pureCalculation(21)
    print("Result from pure function: " + toString(result2))
    
    print("âœ… ALGEBRAIC EFFECTS DEMONSTRATION COMPLETE! ðŸŽ‰")
} 