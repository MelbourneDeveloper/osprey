// ðŸš€ SUPREMO ALGEBRAIC EFFECTS PERFORM DEMO! ðŸ”¥
// Demonstrating REVOLUTIONARY compile-time effect safety!

// Algebraic Effects Perform Demo
// Demonstrating real effect performance and handling

// Effect declaration for state management
effect State {
    get: fn() -> int
    set: fn(int) -> Unit
}

// Effect declaration for logging  
effect Logger {
    log: fn(string) -> Unit
}

// Pure function - no effects
fn doubleValue(x: int) -> int = x * 2

// Function that performs State effects
fn incrementCounter() -> int !State = {
    let current = perform State.get()
    let newValue = current + 1
    perform State.set(newValue)
    newValue
}

// Function that performs Logger effects
fn logOperation(operation: string, value: int) -> Unit !Logger = {
    perform Logger.log("Operation: " + operation)
    perform Logger.log("Value: " + toString(value))
}

// Function using both effects
fn loggedIncrement() -> int ![State, Logger] = {
    perform Logger.log("Starting increment operation")
    let result = incrementCounter()
    perform Logger.log("Increment completed")
    result
}

// Main function with proper handlers
fn main() -> Unit = with handler Logger
    log(msg) => print("[LOG] " + msg)
{
    with handler State
        get() => 42
        set(value) => print("State set to: " + toString(value))
    {
        let result = loggedIncrement()
        print("Final result: " + toString(result))
    }
} 