// COMPREHENSIVE WHERE CONSTRAINT VALIDATION TEST
// This demonstrates constraint validation and exposes type safety issues

// Constraint functions for WHERE clauses
fn notEmpty(s: String) -> Bool = match s {
    "" => false
    _ => true
}

fn isPositive(n: Int) -> Bool = match n {
    0 => false
    _ => true
}

fn validAge(age: Int) -> Bool = match age {
    0 => false
    _ => true
}

fn validEmail(email: String) -> Bool = match email {
    "" => false
    _ => true
}

print("=== CONSTRAINT FUNCTION VERIFICATION ===")

// Verify constraint functions work correctly
print("Testing notEmpty function:")
print("notEmpty(\"\") should be false:")
print(toString(notEmpty("")))
print("notEmpty(\"alice\") should be true:")
print(toString(notEmpty("alice")))

print("Testing isPositive function:")
print("isPositive(0) should be false:")
print(toString(isPositive(0)))
print("isPositive(100) should be true:")
print(toString(isPositive(100)))

print("Testing validAge function:")
print("validAge(0) should be false:")
print(toString(validAge(0)))
print("validAge(25) should be true:")
print(toString(validAge(25)))

print("Testing validEmail function:")
print("validEmail(\"\") should be false:")
print(toString(validEmail("")))
print("validEmail(\"test@email.com\") should be true:")
print(toString(validEmail("test@email.com")))

// Types with WHERE constraints - SHOULD return Result<T, ConstraintError>
type Person = { 
    name: String where notEmpty(name),
    age: Int where validAge(age)
}

type User = {
    username: String where notEmpty(username),
    email: String where validEmail(email),
    userId: Int where isPositive(userId)
}

type Product = {
    name: String where notEmpty(name),
    price: Int where isPositive(price)
}

print("=== CONSTRAINT VALIDATION TEST ===")

// Current Implementation: Returns integers (1 = success, -1 = constraint violation)
print("Testing current constraint implementation:")

print("✅ Valid Person (returns 1):")
let validPerson = Person { name: "Alice", age: 25 }
print(toString(validPerson))

print("❌ Invalid Person - empty name (returns -1):")
let invalidPersonName = Person { name: "", age: 25 }
print(toString(invalidPersonName))

print("❌ Invalid Person - zero age (returns -1):")
let invalidPersonAge = Person { name: "Bob", age: 0 }
print(toString(invalidPersonAge))

print("✅ Valid Product (returns 1):")
let validProduct = Product { name: "Widget", price: 100 }
print(toString(validProduct))

print("❌ Invalid Product - empty name (returns -1):")
let invalidProductName = Product { name: "", price: 100 }
print(toString(invalidProductName))

print("❌ Invalid Product - zero price (returns -1):")
let invalidProductPrice = Product { name: "Widget", price: 0 }
print(toString(invalidProductPrice))

// TYPE SAFETY ISSUE DEMONSTRATION
print("=== TYPE SAFETY ISSUES ===")

print("PROBLEM: These variables have type 'any' instead of Result<T, E>:")
print("invalidPersonAge should be Result<Person, ConstraintError>")
print("But we can treat it as an integer:")
print(toString(invalidPersonAge))

print("SOLUTION NEEDED: Proper Result<T, E> types")
print("Then we would need pattern matching:")
print("match invalidPersonAge {")
print("  Ok { value } => use the person")
print("  Err { error } => handle constraint violation")
print("}")

print("=== CONSTRAINT TESTS COMPLETE ===")

print("=== COMPREHENSIVE WHERE CONSTRAINT TESTS ===")

// Person constraint tests
print("PERSON CONSTRAINT TESTS:")

print("✅ Valid Person (should return 1):")
let validPerson = Person { name: "Alice", age: 25 }
print(toString(validPerson))

print("❌ Invalid Person - empty name (should return -1):")
let invalidPersonName = Person { name: "", age: 25 }
print(toString(invalidPersonName))

print("❌ Invalid Person - zero age (should return -1):")
let invalidPersonAge = Person { name: "Bob", age: 0 }
print(toString(invalidPersonAge))

// User constraint tests  
print("USER CONSTRAINT TESTS:")

print("✅ Valid User (should return 1):")
let validUser = User { username: "alice123", email: "alice@test.com", userId: 100 }
print(toString(validUser))

print("❌ Invalid User - empty username (should return -1):")
let invalidUserName = User { username: "", email: "alice@test.com", userId: 100 }
print(toString(invalidUserName))

print("❌ Invalid User - empty email (should return -1):")
let invalidUserEmail = User { username: "alice123", email: "", userId: 100 }
print(toString(invalidUserEmail))

print("❌ Invalid User - zero userId (should return -1):")
let invalidUserId = User { username: "alice123", email: "alice@test.com", userId: 0 }
print(toString(invalidUserId))

// Product constraint tests
print("PRODUCT CONSTRAINT TESTS:")

print("✅ Valid Product (should return 1):")
let validProduct = Product { name: "Widget", price: 100 }
print(toString(validProduct))

print("❌ Invalid Product - empty name (should return -1):")
let invalidProductName = Product { name: "", price: 100 }
print(toString(invalidProductName))

print("❌ Invalid Product - zero price (should return -1):")
let invalidProductPrice = Product { name: "Widget", price: 0 }
print(toString(invalidProductPrice))

print("=== WHERE CONSTRAINT VALIDATION COMPLETE ===") 