// ðŸ”Œ WebSocket Local Server Test
// Tests WebSocket communication with local Osprey WebSocket server

print("=== WebSocket Local Server Test ===")

// Create and start local WebSocket server
print("Creating local WebSocket server...")
let serverId = websocketCreateServer(8080, "127.0.0.1", "/chat")
print("Starting server listener...")
let listenResult = websocketServerListen(serverId)

// Connect to local WebSocket server
print("Connecting to local WebSocket server...")
let wsId = websocketConnect("ws://localhost:8080/chat", "messageHandler")
print("WebSocket connected with ID: ${wsId}")

// Test basic text messages
print("=== Basic Text Messages ===")

print("Sending: Hello from Osprey!")
let sendResult1 = websocketSend(wsId, "Hello from Osprey!")
print("Send result: ${sendResult1}")

print("Sending: Osprey WebSocket client test")
let sendResult2 = websocketSend(wsId, "Osprey WebSocket client test")
print("Send result: ${sendResult2}")

// Test JSON messages
print("=== JSON Messages ===")

print("Sending JSON chat message...")
let chatJson = "{\"type\": \"chat\", \"user\": \"OspreyClient\", \"message\": \"Hello from Osprey runtime!\"}"
let sendJsonResult = websocketSend(wsId, chatJson)
print("JSON send result: ${sendJsonResult}")

print("Sending status update...")
let statusJson = "{\"type\": \"status\", \"user\": \"OspreyClient\", \"status\": \"testing\"}"
let sendStatusResult = websocketSend(wsId, statusJson)
print("Status send result: ${sendStatusResult}")

// Test rapid messages
print("=== Rapid Message Test ===")

print("Sending message 1...")
let rapid1 = websocketSend(wsId, "Rapid message 1")
print("Rapid 1 result: ${rapid1}")

print("Sending message 2...")
let rapid2 = websocketSend(wsId, "Rapid message 2")
print("Rapid 2 result: ${rapid2}")

print("Sending message 3...")
let rapid3 = websocketSend(wsId, "Rapid message 3")
print("Rapid 3 result: ${rapid3}")

// Close connection
print("=== Closing Connection ===")
print("Closing WebSocket connection...")
let closeResult = websocketClose(wsId)
print("WebSocket closed with result: ${closeResult}")

// Stop the WebSocket server
print("Stopping WebSocket server...")
let stopResult = websocketStopServer(serverId)
print("Server stopped with result: ${stopResult}")

print("=== WebSocket Local Test Complete ===") 