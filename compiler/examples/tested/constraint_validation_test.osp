// CONSTRAINT VALIDATION WITH FAILURE DETECTION TEST
// This demonstrates constraint violations and failure detection

// Constraint functions
fn notEmpty(s: String) -> Bool = match s {
    "" => false
    _ => true
}

fn positive(n: Int) -> Bool = match n {
    0 => false
    _ => true
}

fn validAge(age: Int) -> Bool = match age {
    0 => false
    _ => true
}

// Helper function to interpret constraint results
fn isSuccess(result: int) -> int = match result {
    1 => 1
    _ => 0
}

fn isFailure(result: int) -> int = match isSuccess(result) {
    1 => 0
    _ => 1
}

// Types with WHERE constraints
type Person = { 
    name: String where notEmpty(name), 
    age: Int where validAge(age) 
}

type Product = { 
    name: String where notEmpty(name),
    price: Int where positive(price)
}

print("=== CONSTRAINT VALIDATION WITH FAILURE DETECTION ===")

// Test 1: Valid Person construction (returns 1 for success)
print("Test 1: Valid Person construction")
let validPersonResult = Person { name: "Alice", age: 25 }
print("Result: ${validPersonResult}")
print("Success: ${isSuccess(validPersonResult)}")
print("Failure: ${isFailure(validPersonResult)}")

// Test 2: Invalid Person construction - empty name (should return -1)
print("\nTest 2: Invalid Person - empty name constraint violation")
let invalidNameResult = Person { name: "", age: 25 }
print("Result: ${invalidNameResult}")
print("Success: ${isSuccess(invalidNameResult)}")
print("Failure: ${isFailure(invalidNameResult)}")
print("Expected: Failure = 1 (constraint violation)")

// Test 3: Invalid Person construction - zero age (should return -1)
print("\nTest 3: Invalid Person - zero age constraint violation")
let invalidAgeResult = Person { name: "Bob", age: 0 }
print("Result: ${invalidAgeResult}")
print("Success: ${isSuccess(invalidAgeResult)}")
print("Failure: ${isFailure(invalidAgeResult)}")
print("Expected: Failure = 1 (constraint violation)")

// Test 4: Valid Product construction (returns 1 for success)
print("\nTest 4: Valid Product construction")
let validProductResult = Product { name: "Widget", price: 100 }
print("Result: ${validProductResult}")
print("Success: ${isSuccess(validProductResult)}")
print("Failure: ${isFailure(validProductResult)}")

// Test 5: Invalid Product construction - zero price (should return -1)
print("\nTest 5: Invalid Product - zero price constraint violation")
let invalidPriceResult = Product { name: "Widget", price: 0 }
print("Result: ${invalidPriceResult}")
print("Success: ${isSuccess(invalidPriceResult)}")
print("Failure: ${isFailure(invalidPriceResult)}")
print("Expected: Failure = 1 (constraint violation)")

// Test 6: Multiple constraint violations - both fields invalid
print("\nTest 6: Multiple constraint violations")
let multipleViolationsResult = Person { name: "", age: 0 }
print("Result: ${multipleViolationsResult}")
print("Success: ${isSuccess(multipleViolationsResult)}")
print("Failure: ${isFailure(multipleViolationsResult)}")
print("Expected: Failure = 1 (multiple constraint violations)")

print("\n=== CONSTRAINT VALIDATION TESTS COMPLETE ===")
print("This test demonstrates that WHERE constraints work correctly:")
print("✅ Valid constructions return 1 (success)")
print("❌ Invalid constructions return -1 (constraint violation)")
print("✅ notEmpty constraint rejects empty strings")
print("✅ validAge constraint rejects zero age")
print("✅ positive constraint rejects zero prices")
print("✅ Multiple violations are properly detected")
print("\nFUTURE: Should return Result<T, ConstraintError> types for type safety.") 