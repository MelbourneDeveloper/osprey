// ðŸš€ Advanced HTTP Server - Comprehensive API
// Demonstrates advanced HTTP server features with multiple endpoints

print("=== Advanced HTTP Server Demo ===")

// Define HTTP request handler function
// This function receives HTTP requests from the C runtime and returns HttpResponse
fn handleAdvancedRequest(method: string, path: string, headers: string, body: string) -> HttpResponse = match method {
    "GET" => match path {
        "/api/status" => HttpResponse {
            status: 200,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 52,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"status\": \"running\", \"server\": \"Osprey Advanced\"}",
            partialLength: 52
        }
        "/api/info" => HttpResponse {
            status: 200,
            headers: "Content-Type: application/json",
            contentType: "application/json", 
            contentLength: 78,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"name\": \"Advanced API\", \"version\": \"1.0\", \"features\": [\"REST\", \"JSON\"]}",
            partialLength: 78
        }
        _ => HttpResponse {
            status: 404,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 25,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"error\": \"Not found\"}",
            partialLength: 25
        }
    }
    "POST" => HttpResponse {
        status: 201,
        headers: "Content-Type: application/json",
        contentType: "application/json",
        contentLength: 29,
        streamFd: -1,
        isComplete: true,
        partialBody: "{\"message\": \"Created\"}",
        partialLength: 29
    }
    _ => HttpResponse {
        status: 405,
        headers: "Content-Type: text/plain",
        contentType: "text/plain",
        contentLength: 18,
        streamFd: -1,
        isComplete: true,
        partialBody: "Method Not Allowed",
        partialLength: 18
    }
}

// Start the HTTP server with callback
print("Starting advanced HTTP server on port 8080...")
let serverId = httpListen(8080, handleAdvancedRequest)
print("Advanced HTTP server started with ID: ${serverId}")

print("=== Advanced HTTP Server Demo Complete ===") 