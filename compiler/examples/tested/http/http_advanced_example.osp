// üåê Advanced HTTP Example - Multiple Clients & Concurrent Requests
// Tests advanced HTTP scenarios with multiple clients and various endpoints

print("=== Advanced HTTP Test ===")

// Start HTTP server
print("Creating HTTP server on port 8080...")
let serverId = httpCreateServer(8080, "127.0.0.1")
print("Server created with ID: ${serverId}")

print("Starting server listener...")
let listenResult = httpListen(serverId, 1)
print("Server listening on http://127.0.0.1:8080")

// Create multiple HTTP clients
print("=== Creating Multiple Clients ===")

print("Creating client 1...")
let client1 = httpCreateClient("http://127.0.0.1:8080", 5000)
print("Client 1 created with ID: ${client1}")

print("Creating client 2...")
let client2 = httpCreateClient("http://127.0.0.1:8080", 3000)
print("Client 2 created with ID: ${client2}")

print("Creating client 3...")
let client3 = httpCreateClient("http://127.0.0.1:8080", 10000)
print("Client 3 created with ID: ${client3}")

// Test concurrent requests from different clients
print("=== Concurrent Requests ===")

print("Client 1: GET /api/users")
let get1 = httpGet(client1, "/api/users", "Accept: application/json")
print("Client 1 GET result: ${get1}")

print("Client 2: POST /api/posts")
let post1 = httpPost(client2, "/api/posts", "{\"title\": \"Hello World\", \"content\": \"This is a test post\"}", "Content-Type: application/json")
print("Client 2 POST result: ${post1}")

print("Client 3: GET /api/health")
let health1 = httpGet(client3, "/api/health", "")
print("Client 3 health check: ${health1}")

// Test API versioning
print("=== API Versioning ===")

print("Client 1: GET /v1/users")
let v1Users = httpGet(client1, "/v1/users", "Accept: application/json")
print("v1 API result: ${v1Users}")

print("Client 2: GET /v2/users")
let v2Users = httpGet(client2, "/v2/users", "Accept: application/json")
print("v2 API result: ${v2Users}")

// Test different content types
print("=== Content Types ===")

print("Client 1: POST /api/upload (XML)")
let xmlPost = httpPost(client1, "/api/upload", "<data><user>Alice</user><action>upload</action></data>", "Content-Type: application/xml")
print("XML POST result: ${xmlPost}")

print("Client 2: PUT /api/config (YAML)")
let yamlPut = httpPut(client2, "/api/config", "database:\n  host: localhost\n  port: 5432", "Content-Type: application/yaml")
print("YAML PUT result: ${yamlPut}")

print("Client 3: POST /api/data (Form)")
let formPost = httpPost(client3, "/api/data", "name=Alice&email=alice@example.com&age=30", "Content-Type: application/x-www-form-urlencoded")
print("Form POST result: ${formPost}")

// Test authentication scenarios
print("=== Authentication ===")

print("Client 1: POST /auth/login")
let login = httpPost(client1, "/auth/login", "{\"username\": \"admin\", \"password\": \"secret123\"}", "Content-Type: application/json")
print("Login result: ${login}")

print("Client 2: GET /protected (with token)")
let protectedGet = httpGet(client2, "/protected", "Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.token")
print("Protected GET result: ${protectedGet}")

print("Client 3: DELETE /auth/logout")
let logout = httpDelete(client3, "/auth/logout", "Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.token")
print("Logout result: ${logout}")

// Test error scenarios
print("=== Error Scenarios ===")

print("Client 1: GET /nonexistent")
let notFound = httpGet(client1, "/nonexistent", "")
print("404 test result: ${notFound}")

print("Client 2: POST /api/invalid (bad JSON)")
let badJson = httpPost(client2, "/api/invalid", "{invalid json", "Content-Type: application/json")
print("Bad JSON result: ${badJson}")

// Stop server
print("Stopping server...")
let stopResult = httpStopServer(serverId)
print("Server stopped with result: ${stopResult}")

print("=== Advanced HTTP Test Complete ===") 