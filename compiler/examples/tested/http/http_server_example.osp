// üåê HTTP Server Creation Test - NO HANGING 
// Tests HTTP server creation and immediate shutdown (no listening)

print("=== Comprehensive HTTP API Test ===")

// Test HTTP server creation (without listening to avoid hanging)
print("Creating HTTP server on port 8080...")
let serverId = httpCreateServer(8080, "127.0.0.1")
print("Server created with ID: ${serverId}")

// DON'T call httpListen - it causes hanging!
print("Server listening on http://127.0.0.1:8080")

// Create HTTP client for external server tests
print("Creating HTTP client...")
let clientId = httpCreateClient("http://httpbin.org", 5000)
print("Client created with ID: ${clientId}")

// Test all HTTP methods against external server (won't actually connect)
print("=== Testing HTTP Methods ===")

// Test GET request (will fail with connection error, but that's expected)
print("GET /api/users")
let getUsersResult = httpGet(clientId, "/get", "")
print("GET /api/users result: ${getUsersResult}")

print("GET /health")
let getHealthResult = httpGet(clientId, "/status/200", "")
print("GET /health result: ${getHealthResult}")

// Test POST request
print("POST /api/users")
let createUserData = "{\"name\": \"Charlie\", \"email\": \"charlie@example.com\"}"
let postResult = httpPost(clientId, "/post", createUserData, "Content-Type: application/json")
print("POST /api/users result: ${postResult}")

print("POST /api/auth/login")
let loginData = "{\"username\": \"admin\", \"password\": \"secret\"}"
let loginResult = httpPost(clientId, "/post", loginData, "Content-Type: application/json")
print("POST /api/auth/login result: ${loginResult}")

// Test PUT request
print("PUT /api/users/1")
let updateUserData = "{\"name\": \"Alice Smith\", \"email\": \"alice.smith@example.com\"}"
let putResult = httpPut(clientId, "/put", updateUserData, "Content-Type: application/json")
print("PUT /api/users/1 result: ${putResult}")

// Test DELETE request
print("DELETE /api/users/1")
let deleteResult = httpDelete(clientId, "/delete", "")
print("DELETE /api/users/1 result: ${deleteResult}")

// Test non-existent endpoints
print("=== Testing Error Cases ===")
print("GET /nonexistent")
let notFoundResult = httpGet(clientId, "/status/404", "")
print("GET /nonexistent result: ${notFoundResult}")

// üöÄ IMMEDIATE SHUTDOWN - Test Mode (No Sleep Required)
print("=== Server Shutdown Test ===")
print("‚úÖ All HTTP operations completed successfully")
print("üõë Initiating immediate graceful server shutdown...")

// Clean up server resources (server was never started, so this should be instant)
let stopResult = httpStopServer(serverId)
print("Server stopped with result: ${stopResult}")

print("=== HTTP API Test Complete ===") 