// 🌐 REAL Osprey HTTP Server Test
// Tests Osprey's actual HTTP server with real request handling

print("=== Comprehensive HTTP API Test ===")

// Test HTTP server creation
print("Creating HTTP server on port 8080...")
let serverId = httpCreateServer(8080, "127.0.0.1")
print("Server created with ID: ${serverId}")

// Define request handler that returns proper HTTP responses
fn handleRequest(method: string, path: string, headers: string, body: string) -> HttpResponse = 
    match path {
        "/health" => HttpResponse { status: 200, headers: "Content-Type: application/json", contentType: "application/json", streamFd: -1, isComplete: true, partialBody: "{\"status\": \"healthy\"}" }
        "/api/users" => HttpResponse { status: 200, headers: "Content-Type: application/json", contentType: "application/json", streamFd: -1, isComplete: true, partialBody: "{\"users\": []}" }
        "/api/auth/login" => HttpResponse { status: 200, headers: "Content-Type: application/json", contentType: "application/json", streamFd: -1, isComplete: true, partialBody: "{\"token\": \"abc123\"}" }
        "/api/users/1" => HttpResponse { status: 200, headers: "Content-Type: application/json", contentType: "application/json", streamFd: -1, isComplete: true, partialBody: "{\"id\": 1}" }
        "/nonexistent" => HttpResponse { status: 404, headers: "Content-Type: application/json", contentType: "application/json", streamFd: -1, isComplete: true, partialBody: "{\"error\": \"Not Found\"}" }
        _ => HttpResponse { status: 200, headers: "Content-Type: application/json", contentType: "application/json", streamFd: -1, isComplete: true, partialBody: "{\"ok\": true}" }
    }

// Start the server listening with our handler
let listenResult = httpListen(serverId, handleRequest)
print("Server listening on http://127.0.0.1:8080")

// Create HTTP client to connect to OUR Osprey server
print("Creating HTTP client...")
let clientId = httpCreateClient("http://127.0.0.1:8080", 5000)
print("Client created with ID: ${clientId}")

// Test HTTP methods against our REAL Osprey server
print("=== Testing HTTP Methods ===")

// Test GET request
print("GET /api/users")
let getUsersResult = httpGet(clientId, "/api/users", "")
print("GET /api/users result: ${getUsersResult}")

print("GET /health")
let getHealthResult = httpGet(clientId, "/health", "")
print("GET /health result: ${getHealthResult}")

// Test POST request
print("POST /api/users")
let createUserData = "{\"name\": \"Charlie\", \"email\": \"charlie@example.com\"}"
let postResult = httpPost(clientId, "/api/users", createUserData, "Content-Type: application/json")
print("POST /api/users result: ${postResult}")

print("POST /api/auth/login")
let loginData = "{\"username\": \"admin\", \"password\": \"secret\"}"
let loginResult = httpPost(clientId, "/api/auth/login", loginData, "Content-Type: application/json")
print("POST /api/auth/login result: ${loginResult}")

// Test PUT request
print("PUT /api/users/1")
let updateUserData = "{\"name\": \"Alice Smith\", \"email\": \"alice.smith@example.com\"}"
let putResult = httpPut(clientId, "/api/users/1", updateUserData, "Content-Type: application/json")
print("PUT /api/users/1 result: ${putResult}")

// Test DELETE request
print("DELETE /api/users/1")
let deleteResult = httpDelete(clientId, "/api/users/1", "")
print("DELETE /api/users/1 result: ${deleteResult}")

// Test non-existent endpoints
print("=== Testing Error Cases ===")
print("GET /nonexistent")
let notFoundResult = httpGet(clientId, "/nonexistent", "")
print("GET /nonexistent result: ${notFoundResult}")

print("=== Server Shutdown Test ===")
print("✅ All HTTP operations completed successfully")
print("🛑 Initiating immediate graceful server shutdown...")

// Clean up server resources
let stopResult = httpStopServer(serverId)
print("Server stopped with result: ${stopResult}")

print("=== HTTP API Test Complete ===") 