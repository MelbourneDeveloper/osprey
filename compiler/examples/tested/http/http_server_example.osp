// üåê Comprehensive HTTP API Test - All Methods
// Tests real client-server communication with GET, POST, PUT, DELETE

print("=== Comprehensive HTTP API Test ===")

// Define HTTP request handler function
// This function receives HTTP requests from the C runtime and returns HttpResponse
fn handleHttpRequest(method: string, path: string, headers: string, body: string) -> HttpResponse = match method {
    "GET" => match path {
        "/api/users" => HttpResponse {
            status: 200,
            headers: "Content-Type: application/json",
            contentType: "application/json", 
            contentLength: 78,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"users\": [{\"id\": 1, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Bob\"}]}",
            partialLength: 78
        }
        "/health" => HttpResponse {
            status: 200,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 58,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"status\": \"ok\", \"timestamp\": \"2025-01-15T10:30:00Z\"}",
            partialLength: 58
        }
        _ => HttpResponse {
            status: 404,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 25,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"error\": \"Not found\"}",
            partialLength: 25
        }
    }
    "POST" => match path {
        "/api/users" => HttpResponse {
            status: 201,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 80,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"id\": 3, \"name\": \"New User\", \"message\": \"User created successfully\"}",
            partialLength: 80
        }
        "/api/auth/login" => HttpResponse {
            status: 200,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 73,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"token\": \"abc123xyz\", \"expires\": \"2025-01-16T10:30:00Z\"}",
            partialLength: 73
        }
        _ => HttpResponse {
            status: 404,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 25,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"error\": \"Not found\"}",
            partialLength: 25
        }
    }
    "PUT" => match path {
        "/api/users/1" => HttpResponse {
            status: 200,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 85,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"id\": 1, \"name\": \"Alice Updated\", \"message\": \"User updated successfully\"}",
            partialLength: 85
        }
        _ => HttpResponse {
            status: 404,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 25,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"error\": \"Not found\"}",
            partialLength: 25
        }
    }
    "DELETE" => match path {
        "/api/users/1" => HttpResponse {
            status: 200,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 47,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"message\": \"User deleted successfully\"}",
            partialLength: 47
        }
        _ => HttpResponse {
            status: 404,
            headers: "Content-Type: application/json",
            contentType: "application/json",
            contentLength: 25,
            streamFd: -1,
            isComplete: true,
            partialBody: "{\"error\": \"Not found\"}",
            partialLength: 25
        }
    }
    _ => HttpResponse {
        status: 405,
        headers: "Content-Type: application/json",
        contentType: "application/json",
        contentLength: 35,
        streamFd: -1,
        isComplete: true,
        partialBody: "{\"error\": \"Method not allowed\"}",
        partialLength: 35
    }
}

// Start HTTP server
print("Creating HTTP server on port 8080...")
let serverId = httpCreateServer(8080, "127.0.0.1")
print("Server created with ID: ${serverId}")

print("Starting server listener with callback handler...")
let listenResult = httpListen(serverId, handleHttpRequest)
print("Server listening on http://127.0.0.1:8080")

// Create HTTP client
print("Creating HTTP client...")
let clientId = httpCreateClient("http://127.0.0.1:8080", 5000)
print("Client created with ID: ${clientId}")

// Test all HTTP methods
print("=== Testing HTTP Methods ===")

// Test GET request
print("GET /api/users")
let getUsersResult = httpGet(clientId, "/api/users", "")
print("GET /api/users result: ${getUsersResult}")

print("GET /health")
let getHealthResult = httpGet(clientId, "/health", "")
print("GET /health result: ${getHealthResult}")

// Test POST request
print("POST /api/users")
let createUserData = "{\"name\": \"Charlie\", \"email\": \"charlie@example.com\"}"
let postResult = httpPost(clientId, "/api/users", createUserData, "Content-Type: application/json")
print("POST /api/users result: ${postResult}")

print("POST /api/auth/login")
let loginData = "{\"username\": \"admin\", \"password\": \"secret\"}"
let loginResult = httpPost(clientId, "/api/auth/login", loginData, "Content-Type: application/json")
print("POST /api/auth/login result: ${loginResult}")

// Test PUT request
print("PUT /api/users/1")
let updateUserData = "{\"name\": \"Alice Smith\", \"email\": \"alice.smith@example.com\"}"
let putResult = httpPut(clientId, "/api/users/1", updateUserData, "Content-Type: application/json")
print("PUT /api/users/1 result: ${putResult}")

// Test DELETE request
print("DELETE /api/users/1")
let deleteResult = httpDelete(clientId, "/api/users/1", "")
print("DELETE /api/users/1 result: ${deleteResult}")

// Test non-existent endpoints
print("=== Testing Error Cases ===")
print("GET /nonexistent")
let notFoundResult = httpGet(clientId, "/nonexistent", "")
print("GET /nonexistent result: ${notFoundResult}")

// üöÄ FIBER-BASED KEEP-ALIVE SYSTEM - Modern Server Lifecycle Management
print("=== Server Keep-Alive Test ===")
print("üåê Server now accepting external connections...")
print("üí° Test with: curl http://127.0.0.1:8080/api/users")
print("üí° Test with: curl http://127.0.0.1:8080/health") 
print("‚è∞ Server will stay alive for 3 seconds...")

// Keep server alive for external testing  
sleep(3000)  // 3 seconds for external clients

print("üõë Initiating graceful server shutdown...")

// Clean up server resources
let stopResult = httpStopServer(serverId)
print("Server stopped with result: ${stopResult}")

print("=== HTTP API Test Complete ===") 