// Collections with Algebraic Effects and Fibers

effect Logger {
    log: fn(string) -> Unit
}

// Function to process list data with effects
fn processList(items) -> int !Logger = {
    let first = match items[0] {
        Success { value } => value
        Error { message } => 0
    }
    perform Logger.log("List processing: " + toString(first))
    first * 2
}

// Function to process fiber with effects
fn processWithFiber(taskValue: int) -> int !Logger = {
    perform Logger.log("Fiber processing task: " + toString(taskValue))
    let result = taskValue * 2
    perform Logger.log("Fiber result: " + toString(result))
    result
}

// Main function with handlers
fn main() -> Unit = {
    let scores = [21, 42, 63]
    
    handle Logger
        log msg => print("LOG: " + msg)
    in {
        let listResult = processList(scores)
        let fiberResult = processWithFiber(10)
        
        print("List result: " + toString(listResult))
        print("Fiber result: " + toString(fiberResult))
    }
} 