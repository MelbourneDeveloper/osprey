// Comprehensive real-world fiber examples
print("=== Final Fiber Test ===")

// Distributed computing simulation
fn computePartition(partitionId: int, dataSize: int) =
    partitionId * (dataSize / 4)  // Each partition processes 1/4 of data

// Spawn multiple compute nodes
let node1 = spawn computePartition(partitionId: 1, dataSize: 10000)
let node2 = spawn computePartition(partitionId: 2, dataSize: 10000)
let node3 = spawn computePartition(partitionId: 3, dataSize: 10000)
let node4 = spawn computePartition(partitionId: 4, dataSize: 10000)

print("Distributed computation across 4 nodes:")
print("Node 1 processed: ${await(node1)} records")
print("Node 2 processed: ${await(node2)} records")
print("Node 3 processed: ${await(node3)} records")
print("Node 4 processed: ${await(node4)} records")

// Microservices orchestration pattern
fn authService(userId: int) -> int = match userId {
    0 => 401  // Unauthorized
    _ => 200  // OK
}

fn inventoryService(productId: int) -> int = productId * 50  // Stock count
fn paymentService(amount: int) = amount + 25  // Add processing fee

// Orchestrate multiple service calls
let authResult = spawn authService(123)
let inventory = spawn inventoryService(456)
let payment = spawn paymentService(1000)

print("\nMicroservices orchestration:")
print("Auth service response: ${await(authResult)}")
print("Inventory count: ${await(inventory)}")
print("Payment total: ${await(payment)}")

// Real-time data streaming simulation
fn streamProcessor(batchSize: int) -> int = batchSize * 8  // Process 8KB per item

let batch1 = yield streamProcessor(128)
let batch2 = yield streamProcessor(256)
let batch3 = yield streamProcessor(512)

print("\nStream processing results:")
print("Batch 1: ${batch1} KB processed")
print("Batch 2: ${batch2} KB processed")
print("Batch 3: ${batch3} KB processed")

print("\nFinal fiber implementation test")
print("=== Test Complete ===") 