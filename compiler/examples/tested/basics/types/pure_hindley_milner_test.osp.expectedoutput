=== HINDLEY-MILNER TEST ===
Test 1: Function type inference from usage
identity(42) = 42, identity("test") = test, identity(true) = true
add(10, 20) = 30, concat = helloworld, negate(false) = true

Test 3: Function inference with generic records
getFirst(intPair) = 100
getValue(container1) = hello
getSecond(intPair) = 200

Test 4: Polymorphic function inference
identityP(42) = 42
identityP("test") = test
identityP(true) = true
makePoint(1, 2) = {1, 2}
makePoint("x", "y") = {x, y}

Test 5: Complex field access inference
distance({3, 4}) = 25
combine({"hello", "world"}) = helloworld

Test 6: Higher-order HM inference
intPoint.x = 1
intPoint.y = 2
intPair.first = 100
intPair.second = 200
stringContainer.value = hello
stringContainer.label = world
apply(identityP, 99) = 99
apply(toString, 123) = 123

Test 7: Generic type equality comparison
Generic type equality test - gen1.data = 42
Generic type equality test - gen2.data = 99
Generic type equality test - gen3.data = test
Generic type equality test - gen4.first = 1
Generic type equality test - gen5.first = 3

Test 9: Method call type inference
wrapper.length() equivalent = 42
wrapper.uppercase() equivalent = hello_UPPER

Test 10: Generic type unification
Box<int>.item = 100
Box<string>.item = test
Pair2<int, string>.left = 5
Pair2<int, string>.right = five

Test 11: Type equality and String methods
typeTest1(21) = 42
typeTest2("hi") = hihi
typeTest3(false) = true
=== PURE HINDLEY-MILNER TEST COMPLETE ===
All types inferred from usage context - no explicit type annotations!