// ðŸš€ Async Process Management Example
// Demonstrates async process spawning with ProcessHandle type,
// real-time callback-based stdout/stderr collection, and proper resource management

print("=== Async Process Management Demo ===")

// Define the callback function that C runtime will call
fn processEventHandler(processID: int, eventType: int, data: string) -> Unit = {
    match eventType {
        1 => print("[STDOUT] Process ${toString(processID)}: ${data}")
        2 => print("[STDERR] Process ${toString(processID)}: ${data}")
        3 => print("[EXIT] Process ${toString(processID)} exited with code: ${data}")
        _ => print("[UNKNOWN] Process ${toString(processID)} event ${toString(eventType)}: ${data}")
    }
}

// Test 1: Basic async process spawning with callback-based output
print("--- Test 1: Basic Process Spawning ---")
let result1 = spawnProcess("echo 'Hello from async process!'", processEventHandler)
match result1 {
    Success { value } => {
        print("âœ“ Process spawned successfully")
        let exitCode = awaitProcess(value)
        print("âœ“ Process completed successfully")
        cleanupProcess(value)
        print("âœ“ Process resources cleaned up")
    }
    Error { message } => print("âœ— Process spawn failed")
}

// Test 2: Process with different output
print("--- Test 2: Another Process ---")
let result2 = spawnProcess("echo 'Process 2 output'", processEventHandler)
match result2 {
    Success { value } => {
        print("Process 2 spawned successfully")
        let exitCode2 = awaitProcess(value)
        print("Process 2 finished")
        cleanupProcess(value)
    }
    Error { message } => print("Process 2 failed")
}

// Test 3: Error handling
print("--- Test 3: Error Handling ---")
let result3 = spawnProcess("false", processEventHandler)  // Command that returns exit code 1
match result3 {
    Success { value } => {
        let exitCode3 = awaitProcess(value)
        print("Error process returned non-zero exit code")
        cleanupProcess(value)
    }
    Error { message } => print("âœ— Process spawn unexpectedly failed")
}

// Test 4: Result<ProcessHandle> toString conversion
print("--- Test 4: ProcessHandle Result toString ---")
let result4 = spawnProcess("echo 'Testing toString'", processEventHandler)
print("ProcessHandle Result toString: ${toString(result4)}")  // Tests convertResultToString for ProcessHandle
match result4 {
    Success { value } => {
        awaitProcess(value)
        cleanupProcess(value)
    }
    Error { message } => print("Process 4 failed")
}

print("=== Async Process Management Demo Complete ===")
print("Note: Process output appears via C runtime callbacks during execution") 