// ðŸ”¥ REAL CALLBACK-BASED STDOUT DEMO ðŸ”¥
// This demonstrates the C runtime calling back into Osprey functions for:
// - STDOUT events (eventType = 1) when process writes to stdout
// - STDERR events (eventType = 2) when process writes to stderr
// - EXIT events (eventType = 3) when process terminates
//
// THE CALLBACK FUNCTION IS CALLED FROM C RUNTIME INTO OSPREY!

print("=== CALLBACK-BASED STDOUT COLLECTION DEMO ===")

// Define the callback function that C runtime will call
fn processEventHandler(processID: int, eventType: int, data: string) -> Unit = {
    match eventType {
        1 => print("[CALLBACK] Process ${toString(processID)} STDOUT: ${data}")
        2 => print("[CALLBACK] Process ${toString(processID)} STDERR: ${data}")
        3 => print("[CALLBACK] Process ${toString(processID)} EXIT: ${data}")
        _ => print("[CALLBACK] Process ${toString(processID)} UNKNOWN EVENT ${toString(eventType)}: ${data}")
    }
}

// Test 1: Simple stdout callback demo
print("--- Test 1: Basic Stdout Callback ---")
let result1 = spawnProcess("echo 'Hello from callback!'", processEventHandler)
match result1 {
    Success { value } => {
        print("âœ“ Process spawned with ID: ${toString(value)}")
        let exitCode = awaitProcess(value)
        print("âœ“ Process finished with exit code: ${toString(exitCode)}")
        cleanupProcess(value)
        print("âœ“ Process cleaned up")
    }
    Error { message } => print("âœ— Failed to spawn process")
}

// Test 2: Multiple output lines callback demo
print("--- Test 2: Multiple Lines Callback ---")
let result2 = spawnProcess("printf 'Line 1\\nLine 2\\nLine 3\\n'", processEventHandler)
match result2 {
    Success { value } => {
        print("âœ“ Multi-line process spawned with ID: ${toString(value)}")
        let exitCode = awaitProcess(value)
        print("âœ“ Multi-line process finished")
        cleanupProcess(value)
    }
    Error { message } => print("âœ— Failed to spawn multi-line process")
}

// Test 3: Error process callback demo
print("--- Test 3: Error Process Callback ---")
let result3 = spawnProcess("ls /nonexistent/directory", processEventHandler)
match result3 {
    Success { value } => {
        print("âœ“ Error process spawned with ID: ${toString(value)}")
        let exitCode = awaitProcess(value)
        print("âœ“ Error process finished with exit code: ${toString(exitCode)}")
        cleanupProcess(value)
    }
    Error { message } => print("âœ— Failed to spawn error process")
}

print("=== CALLBACK DEMO COMPLETE ===")
print("The [CALLBACK] lines above show C runtime calling into Osprey!") 