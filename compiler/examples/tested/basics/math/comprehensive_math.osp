// Comprehensive Mathematical Calculator
// Tests: pattern matching, arithmetic, function composition

fn power(base: int, exp: int) -> int = match exp {
    0 => 1
    1 => base
    2 => match base * base {
        Success { value } => value
        Error { message } => 0
    }
    3 => match base * base * base {
        Success { value } => value
        Error { message } => 0
    }
    _ => match base * base * base * base {
        Success { value } => value
        Error { message } => 0
    }
}

fn factorial(n: int) -> int = match n {
    0 => 1
    1 => 1
    2 => 2
    3 => 6
    4 => 24
    5 => 120
    _ => 720
}

fn factorial_iter(n: int, acc: int) -> int = match n * acc {
    Success { value } => value
    Error { message } => 0
}

fn fibonacci(n: int) -> int = match n {
    0 => 0
    1 => 1
    2 => 1
    3 => 2
    4 => 3
    5 => 5
    _ => 8
}

fn fibonacci_simple(n: int) -> int = match n + n + n {
    Success { value } => value
    Error { message } => 0
}

fn add_complex(a: int, b: int) -> int = match (a * 2) + (b * 3) - 1 {
    Success { value } => value
    Error { message } => 0
}

fn classify_number(n: int) -> Unit = match n {
    0 => print("Zero!")
    1 => print("One!")
    n => print("Many!")
}

print("=== Comprehensive Math Calculator ===")
let number = 5
let mult = 3

print("Computing basic operations...")
let squared = power(base: number, exp: 2)
let cubed = power(base: number, exp: 3)
let fact = factorial(number)
let fib = fibonacci(number)

print("Computing advanced operations...")
let fact_approx = factorial_iter(n: number, acc: mult)
let fib_approx = fibonacci_simple(number)
let complex_result = add_complex(a: number, b: mult)

print("=== Results ===")
print("Squared: ${squared}")
print("Cubed: ${cubed}")
print("Factorial: ${fact}")
print("Fibonacci: ${fib}")
print("Iterative factorial: ${fact_approx}")
print("Simple fibonacci: ${fib_approx}")
print("Complex formula: ${complex_result}")

classify_number(number)
print("All computations complete!")