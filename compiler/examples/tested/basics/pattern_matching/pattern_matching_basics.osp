// Basic Pattern Matching Examples
// This example demonstrates pattern matching with integers and simple cases

fn analyzeNumber(n: int) -> string = match n {
    0 => "Zero"
    1 => "One" 
    2 => "Two"
    42 => "The answer to everything!"
    _ => "Some other number"
}

fn isEven(n: int) -> int = match n {
    0 => 1
    2 => 1
    4 => 1
    6 => 1
    8 => 1
    _ => 0
}

fn getCategory(score: int) -> string = match score {
    100 => "Perfect!"
    95 => "Excellent"
    85 => "Very Good"
    75 => "Good"
    65 => "Average"
    _ => "Needs Improvement"
}

// Usage examples
let test1 = 0
let test2 = 42
let test3 = 7
let test4 = 2

print("Number analysis:")
print("${test1} is ${analyzeNumber(test1)}")
print("${test2} is ${analyzeNumber(test2)}")
print("${test3} is ${analyzeNumber(test3)}")

print("\nEven number check:")
print("${test2} is even: ${isEven(test2)}")
print("${test3} is even: ${isEven(test3)}")
print("${test4} is even: ${isEven(test4)}")

print("\nScore categories:")
let scores = 100
print("Score ${scores}: ${getCategory(scores)}")
let scores2 = 85
print("Score ${scores2}: ${getCategory(scores2)}")
let scores3 = 50
print("Score ${scores3}: ${getCategory(scores3)}") 

// Nested match expressions (critical test)
fn nestedTest(x: int, y: int) -> string = match x {
    0 => match y {
        0 => "Both zero"
        _ => "X zero"
    }
    _ => match y {
        0 => "Y zero"
        _ => "Both other"
    }
}

let nested = nestedTest(x: 0, y: 0)
print("Nested: ${nested}")