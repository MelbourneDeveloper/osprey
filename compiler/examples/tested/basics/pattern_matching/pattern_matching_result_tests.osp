// Result Pattern Matching and Error Cases
// Tests: Result types, Success/Error constructors, ternary operations on Results, type mismatches

// SECTION 1: Result Type Definition
type Result = Success { value: string } | Error { message: string }

// SECTION 2: Type Mismatch Error Case
// This should fail compilation: Type mismatch in match expression
// Error: cannot match expression of type 'int' against pattern of type 'Option'
let x = 42
type Option = Some { value: string } | None
let result = match x {
    Some => "some"
    None => "none"
}
print(result)

// SECTION 3: Result Type Tests (Success constructor working)
let successResult = Success { value: "It worked" }
print("Success constructor created")

// SECTION 4: Result Match with Success - should return success value
let successMessage = match successResult {
    Success { value } => value
    Error { message } => "An unknown error occurred"
}
print(successMessage)

// SECTION 5: Result Match with Error - should return error message
let errorResult = Error { message: "Something went wrong" }
let errorMessage = match errorResult {
    Success { value } => "Success: " + value
    Error { message } => "Error: " + message
}
print(errorMessage)