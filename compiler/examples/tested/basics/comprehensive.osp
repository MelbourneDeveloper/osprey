// Comprehensive Osprey Language Feature Showcase
// Enhanced with Map and List types using Hindley-Milner inference

// 1. Type Definitions - Simple union types  
type Grade = A | B | C | D | F

// 2. Function Definitions with polymorphic inference
fn double(x) = x * 2
fn add(x, y) = x + y
fn getFirst(list) = match list[0] {
    Success { value } => toString(value)
    Error { message } => "empty"
}

// 3. Pattern Matching Functions
fn gradeMessage(grade: Grade) -> string = match grade {
    A => "Excellent!"
    B => "Good work!"
    C => "Satisfactory"
    D => "Needs improvement"
    F => "Failed"
}

// 4. String Interpolation Function
fn formatScore(name: string, score: int) -> string = "Student ${name} scored ${score} points"

// 5. Demonstrate core features
let studentName = "Alice"
let baseScore = 85
let bonusPoints = 10

// Named arguments for multi-parameter functions
let totalScore = add(x: baseScore, y: bonusPoints)
let doubledScore = double(totalScore)

// String interpolation with variables and function calls
print("=== Comprehensive Osprey Demo ===")
print(formatScore(name: studentName, score: totalScore))
print("Doubled score: ${doubledScore}")

// Pattern matching with union types
let currentGrade = A
print(gradeMessage(currentGrade))

// List operations with Hindley-Milner inference
print("=== List & Map Operations ===")
let scores = [85, 92, 78, 96, 88]
print("Score list created via HM inference")

let firstScore = getFirst(scores)
print("First score: ${firstScore}")

// Hindley-Milner type inference with lists
let bonusScore = add(x: 85, y: 5)
print("Bonus computation works: ${toString(bonusScore)}")

match scores[1] {
    Success { value } => print("Second score: ${toString(value)}")
    Error { message } => print("Error accessing score")
}

// Map operations with Hindley-Milner inference
let studentGrades = { "Alice": 95, "Bob": 87, "Charlie": 91 }
print("Student grades map created via HM inference")

match studentGrades["Alice"] {
    Success { value } => print("Alice's grade: ${toString(value)}")
    Error { message } => print("Alice not found in grades")
}

// Mixed type list showing polymorphic inference
let mixedData = ["Alice", "Bob", "Charlie"]
print("Student names list created")

match mixedData[2] {
    Success { value } => print("Third student: ${value}")
    Error { message } => print("Error accessing student name")
}

// Simple string output instead of complex match
print("Status: System operational with collections")

// Arithmetic operations
let calculation = double(42)
print("Double of 42: ${calculation}")

// Another student with named arguments
print(formatScore(name: "Bob", score: 92))

print("=== Demo Complete ===") 