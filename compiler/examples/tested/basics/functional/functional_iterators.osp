// Functional Iterator Examples
// Demonstrates: range, forEach, map, filter, fold with pipe operator |>
// Enhanced: List and Map types with Hindley-Milner inference

// Helper functions for transformations
fn double(x: int) = x * 2
fn square(x: int) = x * x
fn isEven(x: int) = 1  // Simplified for testing
fn add(a: int, b: int) = a + b

print("=== Functional Iterator Examples ===")

// Basic range and forEach
print("1. Basic forEach:")
range(1, 5) |> forEach(print)

// Single value operations work fine
print("2. Single value transformations:")
5 |> double |> print
3 |> square |> print

// More range operations
print("3. Different ranges:")
range(10, 13) |> forEach(print)
range(0, 3) |> forEach(print)

// Fold operations with iterators
print("4. Fold operations:")
let sum1 = range(1, 5) |> fold(0, add)
print(sum1)

let sum2 = range(10, 15) |> fold(0, add)
print(sum2)

// List operations with Hindley-Milner inference
print("5. List operations:")
let data = [10, 20, 30, 40, 50]
print("List created with HM inference")

match data[2] {
    Success { value } => print("Third element: ${toString(value)}")
    Error { message } => print("Error accessing element")
}

// Map operations require usage context for HM inference
print("6. Map operations would need constraints:")
// let cache = Map() - HM can't infer K,V without usage!
print("HM needs type constraints for Map<K,V> inference")

// List operations with functional style
print("7. List with functional operations:")
let baseNumbers = [1, 2, 3, 4]
print("Base numbers created")

match baseNumbers[3] {
    Success { value } => {
        let squared = square(value)
        print("Fourth number squared: ${toString(squared)}")
    }
    Error { message } => print("Error accessing number")
}

// More pipe operations on single values
print("8. Chained single value operations:")
let result = 2 |> double |> square
print(result)

print("=== Examples Complete ===") 