// Basic Working Examples
let x = 42
let name = "Alice"

fn double(n: int) -> Result<int, MathError> = n * 2
fn greet(name: string) -> string = name
fn multiply(a, b) = a * b        // Test inference: (int, int) -> Result<int, MathError>
fn isEven(n) = n % 2 == 0        // Test inference: int -> bool (from modulo and comparison)

let result = double(21)
let greeting = greet("Hello")
let multResult = multiply(a: 6, b: 7)  // Test inferred Result type
let evenCheck = isEven(10)             // Test inferred bool return

print("x = ${x}")
print("name = ${name}")

// Handle Result from arithmetic function
match result {
    Success { value } => print("double(21) = ${value}")
    Error { message } => print("Error in double: ${message}")
}

print("greeting = ${greeting}")

// Test inferred functions
let multValue = multResult ?: 0
print("multiply(6, 7) = ${multValue}")
print("isEven(10) = ${toString(evenCheck)}")

// Compound expressions return single Result
let sum = 10 + 5
match sum {
    Success { value } => print("10 + 5 = ${value}")
    Error { message } => print("Error in addition: ${message}")
}

let product = 6 * 7
match product {
    Success { value } => print("6 * 7 = ${value}")
    Error { message } => print("Error in multiplication: ${message}")
}

// Simple match expression
let test = match 42 {
    42 => 1
    _ => 0
}
print("match 42 = ${test}") 