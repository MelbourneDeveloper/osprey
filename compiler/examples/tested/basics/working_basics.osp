// Basic Working Examples
let x = 42
let name = "Alice"

fn greet(name: string) -> string = name
fn double(n) = n * 2             // Test inference: (int) -> Result<int, MathError>
fn multiply(a, b) = a * b        // Test inference: (int, int) -> Result<int, MathError>
fn safeDivide(n, d) = n / d     // Test inference: (int, int) -> Result<float, MathError>

print("x = ${x}")
print("name = ${name}")

// All arithmetic returns Result types now
let doubleResult = double(21)
match doubleResult {
    Success { value } => print("double(21) = ${value}")
    Error { message } => print("Error in double: ${message}")
}

let greeting = greet("Hello")
print("greeting = ${greeting}")

let multResult = multiply(a: 6, b: 7)
match multResult {
    Success { value } => print("multiply(6, 7) = ${value}")
    Error { message } => print("Error in multiply: ${message}")
}

// Handle Result from division
let divResult = safeDivide(n: 20, d: 5)
match divResult {
    Success { value } => print("20 / 5 = ${value}")
    Error { message } => print("Error in division: ${message}")
}

// All arithmetic operations return Result types
let sum = 10 + 5
match sum {
    Success { value } => print("10 + 5 = ${value}")
    Error { message } => print("Error in addition: ${message}")
}

let product = 6 * 7
match product {
    Success { value } => print("6 * 7 = ${value}")
    Error { message } => print("Error in multiplication: ${message}")
}

// Simple match expression
let test = match 42 {
    42 => 1
    _ => 0
}
print("match 42 = ${test}") 