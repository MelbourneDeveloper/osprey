print("=== Advanced Block Statements Test ===")

// Test 1: Block in function definition with list processing
fn compute() = {
    let numbers = [5, 10, 15]
    let base = match numbers[1] {
        Success { value } => value
        Error { message } => 10
    }
    let multiplier = 3
    let result = base * multiplier
    match result {
        Success { value } => value
        Error { message } => 0
    }
}
print("Test 1 - Function block with list: ${compute()}")

// Test 2: Nested blocks with shadowing and maps
let outer = 100
let result2 = {
    let config = { "multiplier": 2, "offset": 25 }
    let outer = match config["offset"] {
        Success { value } => value
        Error { message } => 50
    }
    let inner = {
        let listData = [10, 20, 30]
        let outer = match listData[2] {
            Success { value } => value
            Error { message } => 25
        }
        let mult = outer * 2
        match mult {
            Success { value } => value
            Error { message } => 0
        }
    }
    let sum = outer + inner
    match sum {
        Success { value } => value
        Error { message } => 0
    }
}
print("Test 2 - Nested with shadowing, maps & lists: ${result2}")

// Test 3: Block with conditional logic using collections
let value = 42
let result3 = {
    let scoreMap = { "test1": 84, "test2": 90 }
    let doubled = value * 2
    match doubled {
        Success { dValue } => match dValue {
            84 => match scoreMap["test1"] {
                Success { sValue } => {
                    let added = sValue + 10
                    match added {
                        Success { value } => value
                        Error { message } => 0
                    }
                }
                Error { message } => 0
            }
            _ => 0
        }
        Error { message } => 0
    }
}
print("Test 3 - Block with match and map: ${result3}")

// Test 4: Function returning block with list operations
fn processData(input: int) = {
    let steps = [2, 10, 2]
    let step0 = match steps[0] {
        Success { value } => value
        Error { message } => 1
    }
    let mult = input * step0
    let step1Value = match mult {
        Success { value } => value
        Error { message } => 0
    }
    let step1Idx = match steps[1] {
        Success { value } => value
        Error { message } => 0
    }
    let add = step1Value + step1Idx
    let step2Value = match add {
        Success { value } => value
        Error { message } => 0
    }
    let step2Idx = match steps[2] {
        Success { value } => value
        Error { message } => 1
    }
    step2Value / step2Idx
}
print("Test 4 - Complex function with lists: ${processData(5)}")

// Test 5: Block with mixed collections operations
let mixedTest = {
    let data = [1, 2, 3, 4, 5]
    let lookup = { "key1": 10, "key2": 20 }
    let addResult = (match data[0] {
        Success { value } => value
        Error { message } => 0
    }) + (match data[1] {
        Success { value } => value
        Error { message } => 0
    })
    let sum = match addResult {
        Success { value } => value
        Error { message } => 0
    }
    let multiplier = match lookup["key1"] {
        Success { value } => value
        Error { message } => 1
    }
    let multResult = sum * multiplier
    match multResult {
        Success { value } => value
        Error { message } => 0
    }
}
print("Test 5 - Mixed collections block: ${mixedTest}")

print("=== Advanced Block Statements Complete ===") 