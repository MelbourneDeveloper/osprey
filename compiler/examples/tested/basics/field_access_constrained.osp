// Field Access with Unconstrained Types (Direct Field Access)
// This demonstrates field access on simple record types

print("=== FIELD ACCESS TEST ===")

// Simple unconstrained types (create actual structs - allow direct field access)
type Point = { x: Int, y: Int }
type Circle = { radius: Int, centerX: Int }

print("1. BASIC FIELD ACCESS:")
let point = Point { x: 10, y: 20 }
print("Point x: ${point.x}")  // Direct field access works
print("Point y: ${point.y}")  // Direct field access works

print("\n2. CIRCLE FIELD ACCESS:")
let circle = Circle { radius: 5, centerX: 15 }
print("Circle radius: ${circle.radius}")  // Direct field access 
print("Circle centerX: ${circle.centerX}")    // Direct field access

print("\n3. FIELD ACCESS IN EXPRESSIONS:")
let coordinateSum = point.x + point.y
print("Sum of coordinates: ${coordinateSum}")

print("\n4. FIELD ACCESS IN CALCULATIONS:")
let circleArea = circle.radius * circle.radius * 3  // Approximation of pi * r^2
print("Circle area (approx): ${circleArea}")

print("\n=== FIELD ACCESS TEST COMPLETE ===")

// Note: Field access works directly on unconstrained types
// Constrained types (with validation) would return Result types
// requiring pattern matching, but that feature is still being implemented 